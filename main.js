/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin-
*/

var T=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var L=Object.prototype.hasOwnProperty;var H=(m,r)=>{for(var t in r)T(m,t,{get:r[t],enumerable:!0})},R=(m,r,t,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let a of A(r))!L.call(m,a)&&a!==t&&T(m,a,{get:()=>r[a],enumerable:!(e=M(r,a))||e.enumerable});return m};var F=m=>R(T({},"__esModule",{value:!0}),m);var $={};H($,{default:()=>E});module.exports=F($);var b=require("obsidian");var v={preset:"grid",imageProperty:"cover",imageHeight:"200px",imageFit:"cover",properties:"all",exclude:[],scrollableProperties:!1,contentHeight:"200px",showLabels:!0,cardSpacing:16,enableShadows:!0,propertiesAlign:"left",titleAlign:"left",fontSize:"default",enableClickableCards:!1,defaultDateFormat:"YYYY-MM-DD",propertyFormatters:{},mobileColumns:1,mobilePreset:"grid",mobileImageHeight:"150px",mobileScrollableProperties:!0,mobileContentHeight:"150px",forceMobileMode:!1,enableLazyLoading:!1,enableDynamicUpdates:!1,refreshDelay:2500,debugMode:!1};var p=require("obsidian"),w=class extends p.PluginSettingTab{constructor(r,t){super(r,t),this.plugin=t}display(){let{containerEl:r}=this;r.empty(),r.createEl("h2",{text:"DataCards Settings"}),r.createEl("h3",{text:"Preset Settings"}),new p.Setting(r).setName("Default Preset").setDesc("Choose the default preset for cards").addDropdown(e=>e.addOption("grid","Grid (balanced, 3 columns)").addOption("portrait","Portrait (optimized for book covers, 3 columns)").addOption("square","Square (1:1 cards with minimal text, 4 columns)").addOption("compact","Compact (side-by-side layout, 4 columns)").addOption("dense","Dense (maximum density, 6 columns)").setValue(this.plugin.settings.preset).onChange(async a=>{this.plugin.settings.preset=a,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Image Settings"}),new p.Setting(r).setName("Default Image Property").setDesc("The frontmatter property to use for images").addText(e=>e.setPlaceholder("cover").setValue(this.plugin.settings.imageProperty).onChange(async a=>{this.plugin.settings.imageProperty=a,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Display Settings"}),new p.Setting(r).setName("Show Property Labels").setDesc("Show labels for properties").addToggle(e=>e.setValue(this.plugin.settings.showLabels).onChange(async a=>{this.plugin.settings.showLabels=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Card Spacing").setDesc("Space between cards (in pixels)").addSlider(e=>e.setLimits(0,32,4).setValue(this.plugin.settings.cardSpacing).setDynamicTooltip().onChange(async a=>{this.plugin.settings.cardSpacing=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Enable Card Shadows").setDesc("Add subtle shadows to cards for a more three-dimensional appearance").addToggle(e=>e.setValue(this.plugin.settings.enableShadows).onChange(async a=>{this.plugin.settings.enableShadows=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Properties Alignment").setDesc("Text alignment for properties and their labels").addDropdown(e=>e.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.propertiesAlign).onChange(async a=>{this.plugin.settings.propertiesAlign=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Title Alignment").setDesc("Text alignment for the title (filename)").addDropdown(e=>e.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.titleAlign).onChange(async a=>{this.plugin.settings.titleAlign=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Font Size").setDesc("Text size for all card elements (properties, labels, and title)").addDropdown(e=>e.addOption("larger","Larger (120%)").addOption("large","Large (110%)").addOption("default","Default (100%)").addOption("small","Small (90% - similar to dense preset)").addOption("smaller","Smaller (80%)").setValue(this.plugin.settings.fontSize).onChange(async a=>{this.plugin.settings.fontSize=a,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Card Content Settings"}),new p.Setting(r).setName("Scrollable Properties").setDesc("Enable scrolling for card properties when they exceed the content height (Note: Square and Compact presets are scrollable by default)").addToggle(e=>e.setValue(this.plugin.settings.scrollableProperties).onChange(async a=>{this.plugin.settings.scrollableProperties=a,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Card Interaction Settings"}),new p.Setting(r).setName("Enable Clickable Cards").setDesc("Make the entire card clickable to open the note (not just the title)").addToggle(e=>e.setValue(this.plugin.settings.enableClickableCards).onChange(async a=>{this.plugin.settings.enableClickableCards=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Content Height").setDesc("Height of the scrollable content area (e.g., 200px)").addText(e=>e.setPlaceholder("200px").setValue(this.plugin.settings.contentHeight).onChange(async a=>{this.plugin.settings.contentHeight=a||"200px",await this.plugin.saveSettings()})),r.createEl("h3",{text:"Formatting Settings"}),new p.Setting(r).setName("Default Date Format").setDesc("Format for displaying dates (YYYY = year, MM = month, DD = day)").addText(e=>e.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.defaultDateFormat).onChange(async a=>{this.plugin.settings.defaultDateFormat=a||"YYYY-MM-DD",await this.plugin.saveSettings()})),r.createEl("h3",{text:"Mobile Settings"}),new p.Setting(r).setName("Mobile Preset").setDesc("Preset to use on mobile devices").addDropdown(e=>e.addOption("grid","Grid (balanced)").addOption("portrait","Portrait (optimized for book covers)").addOption("square","Square (1:1 cards with minimal text)").addOption("compact","Compact (side-by-side layout)").addOption("dense","Dense (maximum density)").setValue(this.plugin.settings.mobilePreset).onChange(async a=>{this.plugin.settings.mobilePreset=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Mobile Columns").setDesc("Number of columns to use on mobile devices (default: 1)").addSlider(e=>e.setLimits(1,3,1).setValue(this.plugin.settings.mobileColumns).setDynamicTooltip().onChange(async a=>{this.plugin.settings.mobileColumns=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Mobile Scrollable Properties").setDesc("Enable scrolling for card properties on mobile devices").addToggle(e=>e.setValue(this.plugin.settings.mobileScrollableProperties).onChange(async a=>{this.plugin.settings.mobileScrollableProperties=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Mobile Content Height").setDesc("Height of the scrollable content area on mobile devices").addText(e=>e.setPlaceholder("150px").setValue(this.plugin.settings.mobileContentHeight).onChange(async a=>{this.plugin.settings.mobileContentHeight=a||"150px",await this.plugin.saveSettings()})),new p.Setting(r).setName("Force Mobile Mode").setDesc("Force the plugin to use mobile settings even on desktop (for testing)").addToggle(e=>e.setValue(this.plugin.settings.forceMobileMode).onChange(async a=>{this.plugin.settings.forceMobileMode=a,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Performance Settings"}),new p.Setting(r).setName("Enable Lazy Loading").setDesc("Only load images when they become visible (improves performance with many cards)").addToggle(e=>e.setValue(this.plugin.settings.enableLazyLoading).onChange(async a=>{this.plugin.settings.enableLazyLoading=a,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Update Settings"}),new p.Setting(r).setName("Enable Dynamic Updates").setDesc("Automatically update DataCards when properties change (may impact performance)").addToggle(e=>e.setValue(this.plugin.settings.enableDynamicUpdates).onChange(async a=>{this.plugin.settings.enableDynamicUpdates=a,await this.plugin.saveSettings()})),new p.Setting(r).setName("Refresh Delay").setDesc("Delay in milliseconds before refreshing after a property change (higher values give more time to complete typing)").addSlider(e=>e.setLimits(500,5e3,500).setValue(this.plugin.settings.refreshDelay).setDynamicTooltip().onChange(async a=>{this.plugin.settings.refreshDelay=a,await this.plugin.saveSettings()})).addExtraButton(e=>e.setIcon("reset").setTooltip("Reset to default (2500ms)").onClick(async()=>{this.plugin.settings.refreshDelay=2500,await this.plugin.saveSettings(),this.display()})),new p.Setting(r).setName("Per-Card Dynamic Updates").setDesc('Individual cards can override the global setting with "dynamicUpdate: true/false" in their settings').setDisabled(!0),r.createEl("h3",{text:"Developer Settings"}),new p.Setting(r).setName("Debug Mode").setDesc("Enable debug logging (only use during development or troubleshooting)").addToggle(e=>e.setValue(this.plugin.settings.debugMode).onChange(async a=>{this.plugin.settings.debugMode=a,await this.plugin.saveSettings()})),r.createEl("h3",{text:"Help"});let t=r.createEl("div");t.innerHTML=`
      <p><strong>Basic Usage:</strong><br>
      Use the <code>datacards</code> code block to create card layouts from Dataview queries.</p>
      
      <p><strong>Example:</strong></p>
      <pre><code>
\`\`\`datacards
TABLE title, author, rating, cover FROM #books
SORT rating DESC

// Settings
preset: grid
imageFit: contain
defaultDateFormat: YYYY
\`\`\`
      </code></pre>
      
      <p><strong>Important:</strong> You must explicitly include all properties you want to display in your Dataview query (including the image property).</p>
      
      <p><strong>Image Support:</strong><br>
      The plugin supports external URLs, vault images, and wiki links:<br>
      <code>cover: https://example.com/image.jpg</code> or <code>cover: [[path/to/image.jpg]]</code></p>     
    
      <p><strong>Tip:</strong> Data Cards works best with the Editor-Setting "Readable line length" disabled. </p><br>
      
      <p><a href="https://github.com/Sophokles187/data-cards" target="_blank" rel="noopener">View complete documentation and examples on GitHub</a></p>
    `}};var s=class{static setDebugMode(r){this.debugMode=r}static error(r,...t){console.error(`[DataCards] ${r}`,...t)}static warn(r,...t){console.warn(`[DataCards] ${r}`,...t)}static debug(r,...t){this.debugMode&&console.log(`[DataCards] ${r}`,...t)}};s.debugMode=!1;var x=class{parseDataCardsBlock(r){s.debug("Parsing datacards block");let t=/\n-{3,}\n|\n\/\/\s*Settings.*|\n\/\*\s*Settings\s*\*\/.*/,e=r.match(t),a=/^\/\/\s*Settings.*/,n=r.match(a),i,o;e&&e.index!==void 0?(s.debug("Found settings separator at index:",e.index),i=r.substring(0,e.index).trim(),o=r.substring(e.index+e[0].length).trim()):n?(s.debug("Block starts with settings marker"),i="",o=r.substring(n[0].length).trim()):(s.debug("No settings separator found"),i=r.trim(),o=""),s.debug("Extracted query:",i),i=this.ensureQueryType(i);let l=this.parseSettings(o),d=this.extractColumnAliases(i);return d.length>0&&(l.columnAliases=d,s.debug("Extracted column aliases:",d)),{query:i,settings:l}}extractColumnAliases(r){let t=[];if(!r.trim().toUpperCase().startsWith("TABLE"))return t;try{let e=r.match(/TABLE\s+(without\s+id\s+)?([\s\S]*?)(?:\s+FROM|\s+WHERE|\s+SORT|\s+GROUP BY|\s+LIMIT|\s+FLATTEN|$)/i);if(!e||!e[2])return t;let a=e[2].trim();if(s.debug("Extracted columns text:",a),!a)return t;let n=this.splitColumnsPreservingExpressions(a);for(let i of n){let o=i.match(/^(.*?)\s+as\s+(?:"([^"]+)"|'([^']+)'|([^\s,]+))$/i);if(o){let l=o[1].trim(),d=o[2]||o[3]||o[4],c=l;if(/^[a-zA-Z0-9_.-]+$/.test(l))c=l;else{let g=l.match(/\(\s*".*?"\s*\+\s*([a-zA-Z0-9_.-]+)\s*\+\s*".*?"\s*\)/);g&&g[1]&&(c=g[1],s.debug(`Extracted field name from complex expression: ${c}`))}t.push({original:c,alias:d,expression:l}),s.debug(`Found column alias: ${c} as "${d}"`)}}}catch(e){s.error("Error extracting column aliases:",e)}return t}splitColumnsPreservingExpressions(r){let t=[],e="",a=0,n=!1,i=!1;for(let o=0;o<r.length;o++){let l=r[o];if(l==='"'&&!i?n=!n:l==="'"&&!n&&(i=!i),!n&&!i&&(l==="("?a++:l===")"&&a--),l===","&&a===0&&!n&&!i){t.push(e.trim()),e="";continue}e+=l}return e.trim()&&t.push(e.trim()),t}ensureQueryType(r){if(!/\b(TABLE|LIST|TASK|CALENDAR)\b/i.test(r)){let e=r.split(`
`),a=-1;for(let n=0;n<e.length;n++){let i=e[n].trim();if(i&&!i.startsWith("//")&&!i.startsWith("/*")){a=n;break}}if(a>=0){let n=this.parseSettings(e.slice(a+1).join(`
`)),i="",o=[];return n.imageProperty&&o.push(n.imageProperty),i="",s.debug("Using simple TABLE query without property list"),i.trim()===""?e[a]="TABLE "+e[a]:e[a]="TABLE"+i+" "+e[a],e.join(`
`)}else return"TABLE "+r}return r}parseSettings(r){if(!r)return{};let t={},e=r.split(`
`);s.debug("Parsing settings from text");for(let a of e){if(a.trim().startsWith("//")||a.trim().startsWith("/*")||!a.trim())continue;let n=a.match(/^\s*([a-zA-Z0-9_]+)\s*:\s*(.+)\s*$/);if(n){let[,i,o]=n;if(s.debug(`Found setting: ${i} = ${o}`),i==="properties"&&o.trim().startsWith("[")&&o.trim().endsWith("]")){s.debug("Detected properties array");let l=o.substring(1,o.length-1).trim();if(l){let d=l.split(",").map(c=>c.trim());t[i]=d}else t[i]=[]}else i==="defaultDateFormat"?t[i]=o.trim():i==="dynamicUpdate"?(t[i]=this.parseValue(o.trim()),s.debug(`Parsed dynamicUpdate setting: ${t[i]}`)):t[i]=this.parseValue(o.trim())}}return t}parseValue(r){s.debug("Parsing value:",r);try{return JSON.parse(r)}catch(t){}if(r.startsWith("[")&&r.endsWith("]")){s.debug("Detected array syntax");let t=r.substring(1,r.length-1).trim();return t?t.split(",").map(a=>a.trim()):[]}return/^-?\d+(\.\d+)?$/.test(r)?Number(r):r.toLowerCase()==="true"?!0:r.toLowerCase()==="false"?!1:r}};var k=require("obsidian");var C=class{constructor(r,t){this.currentSettings=null;this.app=r,this.pluginSettings=t}updateSettings(r){this.pluginSettings=r}isMobileDevice(){return k.Platform.isMobile||this.pluginSettings.forceMobileMode}renderCards(r,t,e){s.debug("SPECIAL CHECK - renderCards called with results:",t);let a=!1;if(t&&t.values&&Array.isArray(t.values)&&t.values.length===0?(s.debug("Empty table detected in renderCards"),a=!0):Array.isArray(t)&&t.length===0?(s.debug("Empty array detected in renderCards"),a=!0):t&&typeof t=="object"&&!Array.isArray(t)&&Object.keys(t).length===2&&(s.debug("Object with exactly 2 keys detected in renderCards:",Object.keys(t)),a=!0),a){s.debug("Rendering empty state from renderCards"),this.renderEmptyState(r,"No notes found");return}let n=this.isMobileDevice();s.debug("Is mobile device:",n);let i={...this.pluginSettings};s.debug("Initial settings from plugin:",{preset:i.preset,imageHeight:i.imageHeight,mobileColumns:i.mobileColumns,mobilePreset:i.mobilePreset,mobileImageHeight:i.mobileImageHeight}),i={...i,...e},s.debug("After applying block settings:",{preset:i.preset,imageHeight:i.imageHeight,mobileColumns:i.mobileColumns,mobilePreset:i.mobilePreset,mobileImageHeight:i.mobileImageHeight}),n&&(s.debug("Applying mobile settings..."),s.debug(`Using mobile columns: ${i.mobileColumns}`),i.mobilePreset!==void 0&&(s.debug(`Overriding preset: ${i.preset} with mobilePreset: ${i.mobilePreset}`),i.preset=i.mobilePreset),i.mobileImageHeight!==void 0&&(s.debug(`Overriding imageHeight: ${i.imageHeight} with mobileImageHeight: ${i.mobileImageHeight}`),i.imageHeight=i.mobileImageHeight),s.debug("Final settings after applying mobile settings:",{preset:i.preset,imageHeight:i.imageHeight})),this.currentSettings=i;let o=r.createEl("div",{cls:"datacards-container",attr:{"data-datacards-container":"true"}});o.addClass(`datacards-preset-${i.preset}`),i.enableShadows||o.addClass("datacards-no-shadows"),i.fontSize&&i.fontSize!=="default"?(o.addClass(`datacards-font-${i.fontSize}`),s.debug(`Applied font size class: datacards-font-${i.fontSize}`)):i.preset==="dense"&&(!i.fontSize||i.fontSize==="default")&&(o.addClass("datacards-font-small"),s.debug("Applied small font size for dense preset")),o.style.setProperty("--card-gap",`${i.cardSpacing}px`);let l;if(n)l=i.mobileColumns;else{let c=3;i.preset==="dense"?c=6:i.preset==="compact"||i.preset==="square"?c=4:i.preset==="portrait"&&(c=3),l=e.columns!==void 0?e.columns:c}s.debug(`Using ${l} columns`),o.style.setProperty("--card-columns",l.toString(),"important");let d;if(e.imageHeight!==void 0?d=i.imageHeight:i.preset==="portrait"?d="350px":i.preset==="square"||i.preset==="compact"?d="200px":i.preset==="dense"?d="120px":d="200px",(typeof d=="number"||/^\d+$/.test(d))&&(d=`${d}px`),o.style.setProperty("--image-height",d),e.imageFit!==void 0)o.style.setProperty("--image-fit",i.imageFit);else{let c=i.preset==="portrait"?"contain":"cover";o.style.setProperty("--image-fit",c)}t&&t.values&&Array.isArray(t.values)?(s.debug("Detected table-like results with values array"),this.renderTableResults(o,t,i)):t&&Array.isArray(t)?(s.debug("Detected array results"),this.renderArrayResults(o,t,i)):t&&typeof t=="object"?(s.debug("Detected object results"),this.renderObjectResults(o,t,i)):(s.debug("No valid results detected"),this.renderError(o,"No results or unsupported result type"))}renderError(r,t){let e=r.createEl("div",{cls:"datacards-error",text:t})}renderEmptyState(r,t="No notes found"){s.debug("renderEmptyState called with message:",t);let e=r.createEl("div",{cls:"datacards-container",attr:{"data-datacards-container":"true"}});s.debug("Created cards container for empty state");let a=e.createEl("div",{cls:"datacards-empty-state",text:t});s.debug("Added empty state element with class:","datacards-empty-state")}renderTableResults(r,t,e){let{values:a,headers:n}=t;s.debug("Rendering table results:"),s.debug("- Headers:",n),s.debug("- Number of rows:",a.length),a.forEach((i,o)=>{s.debug(`Processing row ${o}`);let l=this.createCardElement(r);if(e.imageProperty&&n.includes(e.imageProperty)){let u=n.indexOf(e.imageProperty),f=i[u];s.debug(`Image property '${e.imageProperty}' value:`,f),f&&this.addImageToCard(l,f)}else e.imageProperty&&s.debug(`Image property '${e.imageProperty}' not found in headers:`,n);let d=l.createEl("div",{cls:"datacards-content"});if(n.includes("File")||n.includes("file")){let u=n.findIndex(f=>f.toLowerCase()==="file");if(u>=0){let f=i[u];s.debug("File property value:",f);let y=d.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(y,f),e.enableClickableCards&&this.makeCardClickable(l,f)}}let c=d.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(e)){c.addClass("datacards-scrollable-properties");let u=this.getContentHeight(e);c.style.setProperty("--content-height",u)}let h=[];e.properties==="all"?(h=[...n],s.debug("Using all headers as properties:",h)):Array.isArray(e.properties)?(h=[...e.properties],s.debug("Using specified properties:",h)):s.debug("No properties specified, using empty array");let D=h.filter(u=>!e.exclude.includes(u)&&u!==e.imageProperty&&u.toLowerCase()!=="file");s.debug("Filtered properties (after excluding file):",D),D.forEach(u=>{if(s.debug(`Checking property '${u}' in headers:`,n.includes(u)),n.includes(u)){let f=n.indexOf(u),y=i[f];s.debug(`Property '${u}' value:`,y),s.debug(`Property '${u}' type:`,typeof y),this.addPropertyToCard(c,u,y,e)}else s.debug(`Property '${u}' not found in headers`)}),D.length===0&&!n.some(u=>u.toLowerCase()==="file")&&(s.debug("No properties were added to the card"),d.createEl("div",{cls:"datacards-property",text:"No properties to display"}))})}renderArrayResults(r,t,e){t.forEach(a=>{let n=this.createCardElement(r);e.imageProperty&&a[e.imageProperty]&&this.addImageToCard(n,a[e.imageProperty]);let i=n.createEl("div",{cls:"datacards-content"});if("file"in a){let h=i.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(h,a.file),e.enableClickableCards&&this.makeCardClickable(n,a.file)}let o=i.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(e)){o.addClass("datacards-scrollable-properties");let h=this.getContentHeight(e);o.style.setProperty("--content-height",h)}let d=Object.keys(a);(e.properties==="all"?d:Array.isArray(e.properties)?e.properties:[]).filter(h=>!e.exclude.includes(h)&&h!==e.imageProperty&&h.toLowerCase()!=="file").forEach(h=>{h in a&&this.addPropertyToCard(o,h,a[h],e)})})}renderObjectResults(r,t,e){let a=this.createCardElement(r);e.imageProperty&&t[e.imageProperty]&&this.addImageToCard(a,t[e.imageProperty]);let n=a.createEl("div",{cls:"datacards-content"});if("file"in t){let g=n.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(g,t.file),e.enableClickableCards&&this.makeCardClickable(a,t.file)}let i=n.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(e)){i.addClass("datacards-scrollable-properties");let g=this.getContentHeight(e);i.style.setProperty("--content-height",g)}let l=Object.keys(t);(e.properties==="all"?l:Array.isArray(e.properties)?e.properties:[]).filter(g=>!e.exclude.includes(g)&&g!==e.imageProperty&&g.toLowerCase()!=="file").forEach(g=>{g in t&&this.addPropertyToCard(i,g,t[g],e)})}createCardElement(r){var e;let t=r.createEl("div",{cls:"datacards-card"});return(e=this.currentSettings)!=null&&e.enableClickableCards&&t.addClass("datacards-clickable-card"),t}makeCardClickable(r,t){if(!t)return;let e;if(typeof t=="object"&&t!==null?"path"in t?e=t.path:"link"in t?e=t.link:e=String(t):e=String(t),e.includes("[[")&&e.includes("]]")){let a=e.match(/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/);a?e=a[1]:e=e.substring(2,e.length-2).split("|")[0]}r.addClass("datacards-clickable-card"),r.addEventListener("click",a=>{a.target.closest(".internal-link")||(this.app.workspace.openLinkText(e,"",!1,{active:!0}),a.stopPropagation())})}addImageToCard(r,t){var i;let e=r.createEl("div",{cls:"datacards-image-container"}),a;typeof t=="object"&&t!==null?(s.debug("Image value is an object:",t),"path"in t?(a=t.path,s.debug("Extracted path from Link object:",a)):(a=String(t),s.debug("Converted object to string:",a))):(a=String(t),s.debug("Image value is a string:",a)),a=this.extractImageSource(a),s.debug("After image source extraction:",a);let n=e.createEl("div",{cls:"datacards-image-placeholder",text:"Loading image..."});(i=this.currentSettings)!=null&&i.enableLazyLoading?this.lazyLoadImage(e,n,a):this.loadImage(e,n,a)}extractImageSource(r){if(!r||typeof r!="string")return String(r||"");let t=r.match(/!\[(.*?)\]\((.*?)\)/);if(t){let n=t[2];return s.debug("Extracted URL from markdown image syntax:",n),n.replace(/['",.;:]+$/,"")}let e=r.match(/\[\[(.*?)\]\]/);if(e){let n=`[[${e[1]}]]`;return s.debug("Extracted wiki link:",n),n}let a=r.match(/(https?:\/\/[^\s"'<>[\]{}]+)/);if(a){let n=a[1];return s.debug("Extracted URL:",n),n.replace(/['",.;:]+$/,"")}return r}lazyLoadImage(r,t,e){s.debug("Lazy loading image:",e),new IntersectionObserver((n,i)=>{n.forEach(o=>{o.isIntersecting&&(s.debug("Image container is now visible, loading image:",e),this.loadImage(r,t,e),i.disconnect())})},{rootMargin:"100px",threshold:.1}).observe(r)}loadImage(r,t,e){let a=e.match(/!\[(.*?)\]\((.*?)\)/);if(a){let n=a[2];s.debug("Extracted URL from markdown image syntax:",n),this.loadImage(r,t,n);return}if(e.startsWith("http")||e.startsWith("https")){s.debug("Handling as external URL:",e);let n=e.replace(/['",.;:]+$/,"");s.debug("Cleaned URL:",n),this.loadExternalImage(r,t,n)}else if(e.startsWith("[[")&&e.endsWith("]]")){s.debug("Handling as wiki link");let n=e.substring(2,e.length-2),i=n;n.includes("|")&&(i=n.split("|")[0]);try{let o=this.app.vault.getAbstractFileByPath(i);if(o&&"stat"in o){s.debug("Found file in vault:",o);let l=o,d=this.app.vault.getResourcePath(l);s.debug("Resource path:",d);let c=r.createEl("img",{cls:"datacards-image",attr:{src:d}});c.onload=()=>{t.remove(),c.addClass("loaded")},c.onerror=()=>{t.setText("Image not found")}}else s.debug("File not found in vault or not a file:",i),t.setText("Image not found")}catch(o){s.warn("Error loading image:",o),t.setText("Error loading image")}}else{s.debug("Handling as local path");try{let n=this.app.vault.getAbstractFileByPath(e);if(n&&"stat"in n){s.debug("Found file in vault:",n);let i=n,o=this.app.vault.getResourcePath(i);s.debug("Resource path:",o);let l=r.createEl("img",{cls:"datacards-image",attr:{src:o}});l.onload=()=>{t.remove(),l.addClass("loaded")},l.onerror=()=>{t.setText("Image not found")}}else s.debug("File not found in vault:",e),t.setText("Image not found")}catch(n){s.warn("Error loading image:",n),t.setText("Error loading image")}}}loadExternalImage(r,t,e){s.debug("Loading external image with URL:",e);let a=r.createEl("img",{cls:"datacards-image",attr:{src:e,crossorigin:"anonymous"}});a.onload=()=>{s.debug("External image loaded successfully:",e),t.remove(),a.addClass("loaded")},a.onerror=n=>{s.warn("Failed to load external image with crossorigin attribute:",e),s.debug("Trying again without crossorigin attribute"),a.removeAttribute("crossorigin"),a.onload=()=>{s.debug("External image loaded successfully without crossorigin:",e),t.remove(),a.addClass("loaded")},a.onerror=i=>{s.warn("Failed to load external image without crossorigin:",e);let o=`https://images.weserv.nl/?url=${encodeURIComponent(e)}`;s.debug("Trying with image proxy service:",o),a.src=o,a.onload=()=>{s.debug("External image loaded successfully via proxy:",o),t.remove(),a.addClass("loaded")},a.onerror=l=>{s.warn("All attempts to load image failed:",e),t.setText("Image not found - URL: "+e);try{let d=document.createElement("img");d.style.display="none",d.src=e,document.body.appendChild(d),setTimeout(()=>{document.body.contains(d)&&document.body.removeChild(d)},3e3)}catch(d){s.debug("Error during final test:",d)}}}}}addPropertyToCard(r,t,e,a){s.debug(`Adding property to card: ${t} = ${e}`),s.debug(`Property type: ${typeof e}`);let n=r.createEl("div",{cls:"datacards-property"});a.propertiesAlign&&n.addClass(`datacards-text-${a.propertiesAlign}`);let i=t;if(a.columnAliases){let o=a.columnAliases.find(l=>l.original===t);o&&(i=o.alias,s.debug(`Using alias "${i}" for property "${t}"`))}if(a.showLabels){let o=n.createEl("div",{cls:"datacards-property-label",text:i});a.propertiesAlign&&o.addClass(`datacards-text-${a.propertiesAlign}`)}if(t.toLowerCase()==="file")this.formatFileProperty(n,e);else{let o=a.propertyFormatters[t];o?this.formatPropertyWithCustomFormatter(n,e,o):this.formatPropertyByType(n,e)}}formatPropertyWithCustomFormatter(r,t,e){let a=r.createEl("div",{cls:"datacards-property-value"});switch(e.type){case"stars":this.formatAsStars(a,t,e.options);break;case"badge":this.formatAsBadge(a,t,e.options);break;case"progress":this.formatAsProgress(a,t,e.options);break;case"date":this.formatAsDate(a,t,e.options);break;case"tags":this.formatAsTags(a,t,e.options);break;default:a.setText(String(t))}}processRichText(r,t){if(typeof t!="string")return!1;s.debug("Processing rich text:",t);let e=/<[a-z][\s\S]*>/i.test(t),a=t.includes("[[");if(!a&&!e)return s.debug("Content is plain text, skipping rich text processing."),!1;s.debug(`Content has wiki links: ${a}, has HTML: ${e}`);let n=this.tokenizeRichText(t);return s.debug("Tokens:",n),n.forEach(i=>{if(i.type==="wikilink")this.createWikiLink(r,i.content);else if(i.type==="html"){let l=document.createDocumentFragment().createDiv();for(l.innerHTML=i.content;l.firstChild;)r.appendChild(l.firstChild)}else r.appendChild(document.createTextNode(i.content))}),!0}tokenizeRichText(r){let t=[],e=/(\[\[.*?\]\])|(<[^>]+>|&[a-zA-Z#0-9]+;)/g,a=0,n;for(;(n=e.exec(r))!==null;)n.index>a&&t.push({type:"text",content:r.substring(a,n.index)}),n[1]?t.push({type:"wikilink",content:n[1]}):n[2]&&t.push({type:"html",content:n[2]}),a=n.index+n[0].length;return a<r.length&&t.push({type:"text",content:r.substring(a)}),t}createWikiLink(r,t){var l;let e=/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/,a=t.match(e);if(!a){r.appendChild(document.createTextNode(t)),s.warn("Invalid wiki link format passed to createWikiLink:",t);return}let n=a[1],i=a[2]||this.getCleanFilename(n);s.debug(`Creating wiki link: path="${n}", display="${i}"`);let o=r.createEl("a",{cls:"internal-link",text:i,attr:{href:n,"data-href":n,"data-type":"link",target:"_blank",rel:"noopener"}});try{this.app.workspace.hoverPopover?this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:o,targetEl:o,linktext:n,sourcePath:(l=this.app.workspace.getActiveFile())==null?void 0:l.path}):s.debug("Hover popover not available, skipping hover registration.")}catch(d){s.warn("Error registering hover link:",d)}}formatPropertyByType(r,t){s.debug("formatPropertyByType called with value:",t),s.debug("Value type:",typeof t),typeof t=="string"&&(s.debug("String value length:",t.length),s.debug("String value exact content:",JSON.stringify(t)));let e=r.createEl("div",{cls:"datacards-property-value"});if(r.hasClass("datacards-text-left")?e.addClass("datacards-text-left"):r.hasClass("datacards-text-center")?e.addClass("datacards-text-center"):r.hasClass("datacards-text-right")&&e.addClass("datacards-text-right"),t==null)e.setText("");else if(Array.isArray(t))e.setText(t.join(", "));else if(typeof t=="boolean"){let a=e.createEl("input",{attr:{type:"checkbox",checked:t?"checked":"",disabled:"disabled"}})}else if(typeof t=="number")e.setText(t.toString());else if(t instanceof Date)this.formatAsDate(e,t);else if(typeof t=="string"){if(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{2}:\d{2}$/.test(t)||/^\d{4}-\d{2}-\d{2}$/.test(t)){let i=new Date(t);if(!isNaN(i.getTime())){this.formatAsDate(e,i);return}}if(this.processRichText(e,t))return;let n=t.match(/!\[(.*?)\]\((.*?)\)/);if(n){s.debug("Found markdown image in property value (fallback)");let i=n[2],o=n[1];e.addClass("loading");let l=e.createEl("img",{cls:"datacards-property-image loading",attr:{src:i,alt:o||"Image",crossorigin:"anonymous"}});l.onload=()=>{s.debug("Property image loaded successfully:",i),l.removeClass("loading")},l.onerror=()=>{s.warn("Failed to load property image:",i),l.remove(),e.removeClass("loading"),e.addClass("image-error"),e.setText("Image not found: "+i)};return}if(t.startsWith("#")){let i=e.createEl("a",{cls:"datacards-tag tag-link",text:t,attr:{href:t,"data-href":t,"data-type":"tag"}});return}s.debug("Treating value as plain text:",t),e.setText(t)}else if(typeof t=="object"&&t!==null){if("path"in t&&"type"in t&&t.type==="file"){s.debug("Handling Dataview Link object:",t);let a=t.path,n=t.display||this.getCleanFilename(a);s.debug(`Creating link from Dataview Link object: path="${a}", display="${n}"`),this.createWikiLink(e,`[[${a}|${n}]]`);return}if("ts"in t&&typeof t.ts=="number"){let a=new Date(t.ts);if(!isNaN(a.getTime())){this.formatAsDate(e,a);return}}e.setText(String(t))}else e.setText(String(t))}formatAsStars(r,t,e){let a=(e==null?void 0:e.max)||5,n="\u2605",i="\u2606",o=r.createEl("div",{cls:"datacards-stars"}),l=Math.min(Math.max(0,t),a);for(let d=0;d<l;d++)o.createEl("span",{cls:"datacards-star datacards-star-full",text:n});for(let d=l;d<a;d++)o.createEl("span",{cls:"datacards-star datacards-star-empty",text:i})}formatAsBadge(r,t,e){let a=r.createEl("span",{cls:"datacards-badge",text:t});e!=null&&e.color&&(a.style.backgroundColor=e.color)}formatAsProgress(r,t,e){let a=(e==null?void 0:e.max)||100,n=Math.min(Math.max(0,t),a)/a*100,i=r.createEl("div",{cls:"datacards-progress-container"}),o=i.createEl("div",{cls:"datacards-progress-bar"});o.style.width=`${n}%`,e!=null&&e.showText&&i.createEl("span",{cls:"datacards-progress-text",text:`${Math.round(n)}%`})}formatAsDate(r,t,e){let a=typeof t=="string"?new Date(t):t;if(isNaN(a.getTime())){r.setText(String(t));return}let n=(e==null?void 0:e.format)||(this.currentSettings?this.currentSettings.defaultDateFormat:v.defaultDateFormat),i=a.getFullYear(),o=(a.getMonth()+1).toString().padStart(2,"0"),l=a.getDate().toString().padStart(2,"0"),d=n.replace("YYYY",i.toString()).replace("MM",o).replace("DD",l);r.setText(d)}formatFileProperty(r,t){var n;let e=r.createEl("div",{cls:"datacards-property-value datacards-file-property"});if((n=this.currentSettings)!=null&&n.titleAlign?e.addClass(`datacards-text-${this.currentSettings.titleAlign}`):r.hasClass("datacards-text-left")?e.addClass("datacards-text-left"):r.hasClass("datacards-text-center")?e.addClass("datacards-text-center"):r.hasClass("datacards-text-right")&&e.addClass("datacards-text-right"),t==null){e.setText("");return}let a;if(typeof t=="object"&&t!==null?"path"in t?a=t.path:"link"in t?a=t.link:a=String(t):a=String(t),a=this.extractImageSource(a),s.debug("File property after image source extraction:",a),typeof t=="string"&&t.includes("[[")&&t.includes("|")&&t.includes("]]")){s.debug("Found wiki link with pipe character:",t);let i=t.match(/\[\[.*\|(.*?)\]\]/);if(i&&i[1]){s.debug("Extracted display text:",i[1]);let o=t.match(/\[\[(.*?)\|(.*?)\]\]/);if(o){let l=o[1],d=o[2];s.debug(`Creating link from pipe syntax - path: "${l}", display: "${d}"`);let c=e.createEl("a",{cls:"internal-link datacards-file-link",text:d,attr:{href:l,"data-href":l,"data-type":"link"}});s.debug("Created link element for pipe syntax:",c);try{this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:c,targetEl:c,linktext:l})}catch(g){}return}else{s.debug("Fallback to text only for pipe syntax"),e.setText(i[1]);return}}}if(a.includes("[[")&&a.includes("]]")){s.debug("Found wiki link in file property:",a);let i=a.match(/\[\[([^\]]+)\]\]/);if(i){let o=i[1],l=o,d=o;if(o.includes("|")){let g=o.split("|");d=g[0],l=g[1]}else l=this.getCleanFilename(d);let c=e.createEl("a",{cls:"internal-link datacards-file-link",text:l,attr:{href:d,"data-href":d,"data-type":"link"}});return}}else if(a.startsWith("[[")&&a.endsWith("]]")){let i=a.substring(2,a.length-2),o=i,l=i;if(i.includes("|")){let c=i.split("|");l=c[0],o=c[1]}else o=this.getCleanFilename(l);let d=e.createEl("a",{cls:"internal-link datacards-file-link",text:o,attr:{href:l,"data-href":l,"data-type":"link"}})}else{let i=this.getCleanFilename(a),o=e.createEl("a",{cls:"internal-link datacards-file-link",text:i,attr:{href:a,"data-href":a,"data-type":"link"}})}}getCleanFilename(r){let t=r;return t.includes("/")&&(t=t.split("/").pop()||t),t.endsWith(".md")&&(t=t.substring(0,t.length-3)),t}formatAsTags(r,t,e){let a=r.createEl("div",{cls:"datacards-tags-container"});(Array.isArray(t)?t:[t]).forEach(i=>{let o=i.startsWith("#")?i:`#${i}`,l=a.createEl("a",{cls:"datacards-tag tag-link",text:o,attr:{href:o,"data-href":o,"data-type":"tag"}})})}shouldUseScrollableProperties(r){let t=!1;return(r.preset==="square"||r.preset==="compact")&&(t=!0),this.pluginSettings.scrollableProperties!==void 0&&(t=this.pluginSettings.scrollableProperties),this.isMobileDevice()&&this.pluginSettings.mobileScrollableProperties!==void 0&&(t=this.pluginSettings.mobileScrollableProperties),r.scrollableProperties!==void 0&&(t=r.scrollableProperties),t}getContentHeight(r){let t="200px";return this.pluginSettings.contentHeight&&(t=this.pluginSettings.contentHeight),this.isMobileDevice()&&this.pluginSettings.mobileContentHeight&&(t=this.pluginSettings.mobileContentHeight),r.contentHeight&&(t=r.contentHeight),t}};var S=class{constructor(r){this.plugin=r}isDataviewEnabled(){return this.plugin.app.plugins.plugins.dataview!==void 0}getDataviewApi(){return this.isDataviewEnabled()?this.plugin.app.plugins.plugins.dataview.api:null}async executeQuery(r,t,e){let a=this.getDataviewApi();if(!a)return null;try{return await a.query(r,t,e)}catch(n){throw s.error("Error executing Dataview query:",n),n}}async waitForDataviewReady(){let r=this.getDataviewApi();return r?r.index&&r.index.initialized?(s.debug("Dataview index is already initialized"),!0):(s.debug("Waiting for Dataview index to be ready..."),new Promise(t=>{let e=this.plugin.app,a=e.metadataCache.on("dataview:index-ready",()=>{s.debug("Dataview index is now ready"),e.metadataCache.offref(a),t(!0)});setTimeout(()=>{s.warn("Timed out waiting for Dataview index"),e.metadataCache.offref(a),t(!1)},5e3)})):!1}async executeSafeQuery(r,t,e,a=0){let n=this.getDataviewApi();if(!n)return s.error("Dataview API not found. Make sure Dataview plugin is enabled."),{successful:!1,value:"Dataview plugin is not enabled"};if(!r||r.trim()==="")return s.error("Empty Dataview query"),{successful:!1,value:"Empty query"};s.debug("Executing Dataview query:",r),s.debug("Source path:",t);try{if(typeof n.query=="function"){s.debug("Using api.query method");try{let i=await n.query(r,t,e);return s.debug("Direct query result type:",typeof i),i==null?(s.error("Direct query returned undefined or null"),{successful:!1,value:"No results returned"}):(i&&typeof i=="object"&&("values"in i&&Array.isArray(i.values)&&s.debug("Result contains a values array with length:",i.values.length),"headers"in i&&Array.isArray(i.headers)&&s.debug("Result contains headers:",i.headers)),i&&typeof i=="object"&&"values"in i&&Array.isArray(i.values)&&i.values.length===0&&a<3?(s.debug(`Empty result, retrying (attempt ${a+1}/3)...`),new Promise(o=>{setTimeout(async()=>{let l=await this.executeSafeQuery(r,t,e,a+1);o(l)},500)})):{successful:!0,value:i})}catch(i){return s.error("Error in direct query:",i),{successful:!1,value:i?i.message||String(i):"Error in query execution"}}}else return s.error("Dataview API query method not found."),{successful:!1,value:"Incompatible Dataview API version"}}catch(i){return s.error("Error executing Dataview query:",i),{successful:!1,value:i?i.message||String(i):"Unknown error"}}}};function P(m,r,t=!1){let e=null,a=null,n=null,i;function o(...l){console.log(`[DataCards] Debounce called, wait time: ${r}ms, has existing timeout: ${e!==null}`);let d=this;e&&(console.log("[DataCards] Clearing previous debounce timeout"),clearTimeout(e),e=null),a=l,n=d;let c=()=>{console.log("[DataCards] Debounce timeout expired, executing function"),e=null,t||(i=m.apply(d,l),e||(a=n=null))},g=t&&!e;return console.log(`[DataCards] Setting new debounce timeout for ${r}ms`),e=setTimeout(c,r),g&&(console.log("[DataCards] Immediate execution requested"),i=m.apply(d,l),a=n=null),i}return o.cancel=()=>{e&&clearTimeout(e),e=a=n=null},o.flush=()=>(e&&(clearTimeout(e),e=null,t||(i=m.apply(n,a),a=n=null)),i),o}var E=class extends b.Plugin{constructor(){super(...arguments);this.isRefreshing=!1;this.lastActiveElement=null}async onload(){await this.loadSettings(),s.setDebugMode(this.settings.debugMode),this.parserService=new x,this.rendererService=new C(this.app,this.settings),this.dataviewApiUtil=new S(this),this.updateDebouncedRefresh(),this.registerMarkdownCodeBlockProcessor("datacards",this.processDataCardsBlock.bind(this)),this.addSettingTab(new w(this.app,this)),this.addCommand({id:"refresh-datacards",name:"Refresh DataCards in active view",callback:()=>{this.refreshActiveView(!0)}}),this.registerDataviewEvents(),this.registerMetaBindEvents(),s.debug("DataCards plugin loaded")}updateDebouncedRefresh(){this.debouncedRefresh=P(()=>{s.debug(`Debounced refresh executing after ${this.settings.refreshDelay}ms`),this.refreshActiveView(!1)},this.settings.refreshDelay)}registerMetaBindEvents(){this.app.workspace.onLayoutReady(()=>{var t;if(this.metaBindPlugin=(t=this.app.plugins)==null?void 0:t.plugins["meta-bind"],!this.metaBindPlugin){s.debug("Meta Bind plugin not found or Obsidian plugins structure not accessible as expected. Skipping Meta Bind event registration.");return}s.debug("Meta Bind plugin found. Registering event listeners."),this.registerEvent(this.app.metadataCache.on("changed",e=>{e&&e.path&&(s.debug(`Obsidian metadata changed for file: ${e.path}`),this.handleMetaBindChange(e.path,null,null))})),this.metaBindPlugin.api&&typeof this.metaBindPlugin.api.onChange=="function"&&(s.debug("Registering using Meta Bind api.onChange"),this.registerEvent(this.metaBindPlugin.api.onChange((e,a,n)=>{let i=typeof e=="string"?e:e==null?void 0:e.path;i?(s.debug(`Meta Bind onChange event: file=${i}, key=${a}, value=${JSON.stringify(n)}`),this.handleMetaBindChange(i,a,n)):s.warn("Meta Bind onChange event received without a valid file path.")}))),this.metaBindPlugin.metadataManager&&typeof this.metaBindPlugin.metadataManager.on=="function"&&(s.debug("Registering using Meta Bind metadataManager events"),this.registerEvent(this.metaBindPlugin.metadataManager.on("changed",(e,a)=>{e&&e.storagePath?(s.debug(`Meta Bind metadataManager 'changed' event: path=${e.storagePath}, prop=${JSON.stringify(e.storageProp)}, value=${JSON.stringify(a)}`),this.handleMetaBindChange(e.storagePath,e.storageProp,a)):s.warn('Meta Bind metadataManager "changed" event received without a valid bindTarget.')})),this.registerEvent(this.metaBindPlugin.metadataManager.on("deleted",e=>{e&&e.storagePath&&(s.debug(`Meta Bind metadataManager 'deleted' event: path=${e.storagePath}, prop=${JSON.stringify(e.storageProp)}`),this.handleMetaBindChange(e.storagePath,e.storageProp,null))})))})}registerDataviewEvents(){this.app.workspace.onLayoutReady(()=>{if(!this.dataviewApiUtil.isDataviewEnabled()){s.warn("Dataview plugin is not enabled, cannot register for metadata change events");return}this.registerEvent(this.app.metadataCache.on("dataview:metadata-change",(t,e)=>{this.handleMetadataChange(t,e)})),s.debug("Registered for Dataview metadata change events")})}handleMetadataChange(t,e){if(!this.settings.enableDynamicUpdates){s.debug("Dynamic updates are disabled globally, ignoring metadata change");return}s.debug(`Dataview metadata changed: ${t} for file ${e==null?void 0:e.path}`),this.debouncedRefresh()}handleMetaBindChange(t,e,a){if(!this.settings.enableDynamicUpdates){s.debug("Dynamic updates are disabled globally, ignoring Meta Bind change");return}s.debug(`Meta Bind property changed: ${e} in file ${t}, value: ${JSON.stringify(a)}`),this.debouncedRefresh()}onunload(){s.debug("DataCards plugin unloaded")}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings),s.setDebugMode(this.settings.debugMode),this.rendererService.updateSettings(this.settings),this.updateDebouncedRefresh(),this.refreshActiveView(!0)}async processDataCardsBlock(t,e,a){if(s.debug("Processing DataCards block"),!this.dataviewApiUtil.isDataviewEnabled()){s.error("Dataview plugin is not enabled"),e.createEl("div",{cls:"datacards-error",text:"Dataview plugin is required but not enabled"});return}await this.dataviewApiUtil.waitForDataviewReady()||s.warn("Timed out waiting for Dataview to be ready");try{let{query:i,settings:o}=this.parserService.parseDataCardsBlock(t);s.debug("Parsed query:",i),s.debug("Parsed settings:",o);let l=a.sourcePath,d=document.createElement("div");d.style.display="none",document.body.appendChild(d);try{s.debug("Executing Dataview query");let c=await this.dataviewApiUtil.executeSafeQuery(i,l,d);if(document.body.removeChild(d),!c){s.error("Result is undefined or null"),e.createEl("div",{cls:"datacards-error",text:"Error executing Dataview query: undefined result"});return}if(!c.successful){let h=`Error executing Dataview query: ${c.value||"unknown error"}`;s.error(h),e.createEl("div",{cls:"datacards-error",text:h});return}if(c.value===void 0||c.value===null){s.error("Dataview returned null or undefined value"),e.createEl("div",{cls:"datacards-error",text:"Dataview returned no results. Make sure your query is correct and returns data."});return}if(Array.isArray(c.value)&&c.value.length===0){s.debug("Dataview returned empty array"),this.rendererService.renderEmptyState(e,"No notes found");return}if(c.value.values&&Array.isArray(c.value.values)&&c.value.values.length===0){s.debug("Dataview returned empty table"),this.rendererService.renderEmptyState(e,"No notes found");return}let g=c.value;g&&typeof g=="object"&&"successful"in g&&"value"in g&&(s.debug("Unwrapping nested result structure"),g=g.value),o.dynamicUpdate!==void 0&&s.debug(`Card has dynamicUpdate setting: ${o.dynamicUpdate}`),this.rendererService.renderCards(e,g,o)}catch(c){s.error("Error executing Dataview query:",c),document.body.contains(d)&&document.body.removeChild(d),e.createEl("div",{cls:"datacards-error",text:`Error executing Dataview query: ${c.message||String(c)}`})}}catch(i){s.error("DataCards error:",i),e.createEl("div",{cls:"datacards-error",text:`Error processing DataCards block: ${i.message||String(i)}`})}}refreshActiveView(t=!0){if(this.isRefreshing){s.debug("Refresh already in progress, skipping.");return}this.isRefreshing=!0,s.debug("Starting refreshActiveView...");let e=this.app.workspace.getActiveViewOfType(b.MarkdownView);e&&e.previewMode?(e.previewMode.rerender(!0),t&&new b.Notice("DataCards refreshed",2e3),setTimeout(()=>{this.isRefreshing=!1,s.debug("Refresh finished.")},250)):(t&&new b.Notice("No active markdown view to refresh",2e3),this.isRefreshing=!1,s.debug("No active markdown view found."))}};
