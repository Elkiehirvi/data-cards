/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin-
*/

var A=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var $=Object.getOwnPropertyNames;var R=Object.prototype.hasOwnProperty;var U=(h,n)=>{for(var e in n)A(h,e,{get:n[e],enumerable:!0})},B=(h,n,e,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let a of $(n))!R.call(h,a)&&a!==e&&A(h,a,{get:()=>n[a],enumerable:!(t=I(n,a))||t.enumerable});return h};var N=h=>B(A({},"__esModule",{value:!0}),h);var O={};U(O,{default:()=>k});module.exports=N(O);var b=require("obsidian");var v={preset:"grid",imageProperty:"cover",imageHeight:"200px",imageFit:"cover",properties:"all",exclude:[],scrollableProperties:!1,contentHeight:"200px",showLabels:!0,cardSpacing:16,enableShadows:!0,propertiesAlign:"left",titleAlign:"left",fontSize:"default",defaultDateFormat:"YYYY-MM-DD",propertyFormatters:{},mobileColumns:1,mobilePreset:"grid",mobileImageHeight:"150px",mobileScrollableProperties:!0,mobileContentHeight:"150px",forceMobileMode:!1,enableLazyLoading:!1,debugMode:!1};var m=require("obsidian"),E=class extends m.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"DataCards Settings"}),e.createEl("h3",{text:"Preset Settings"}),new m.Setting(e).setName("Default Preset").setDesc("Choose the default preset for cards").addDropdown(a=>a.addOption("grid","Grid (balanced, 3 columns)").addOption("portrait","Portrait (optimized for book covers, 3 columns)").addOption("square","Square (1:1 cards with minimal text, 4 columns)").addOption("compact","Compact (side-by-side layout, 4 columns)").addOption("dense","Dense (maximum density, 6 columns)").setValue(this.plugin.settings.preset).onChange(async r=>{this.plugin.settings.preset=r,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Image Settings"}),new m.Setting(e).setName("Default Image Property").setDesc("The frontmatter property to use for images").addText(a=>a.setPlaceholder("cover").setValue(this.plugin.settings.imageProperty).onChange(async r=>{this.plugin.settings.imageProperty=r,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Display Settings"}),new m.Setting(e).setName("Show Property Labels").setDesc("Show labels for properties").addToggle(a=>a.setValue(this.plugin.settings.showLabels).onChange(async r=>{this.plugin.settings.showLabels=r,await this.plugin.saveSettings()})),new m.Setting(e).setName("Card Spacing").setDesc("Space between cards (in pixels)").addSlider(a=>a.setLimits(0,32,4).setValue(this.plugin.settings.cardSpacing).setDynamicTooltip().onChange(async r=>{this.plugin.settings.cardSpacing=r,await this.plugin.saveSettings()})),new m.Setting(e).setName("Enable Card Shadows").setDesc("Add subtle shadows to cards for a more three-dimensional appearance").addToggle(a=>a.setValue(this.plugin.settings.enableShadows).onChange(async r=>{this.plugin.settings.enableShadows=r,await this.plugin.saveSettings()})),new m.Setting(e).setName("Properties Alignment").setDesc("Text alignment for properties and their labels").addDropdown(a=>a.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.propertiesAlign).onChange(async r=>{this.plugin.settings.propertiesAlign=r,await this.plugin.saveSettings()})),new m.Setting(e).setName("Title Alignment").setDesc("Text alignment for the title (filename)").addDropdown(a=>a.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.titleAlign).onChange(async r=>{this.plugin.settings.titleAlign=r,await this.plugin.saveSettings()})),new m.Setting(e).setName("Font Size").setDesc("Text size for all card elements (properties, labels, and title)").addDropdown(a=>a.addOption("larger","Larger (120%)").addOption("large","Large (110%)").addOption("default","Default (100%)").addOption("small","Small (90% - similar to dense preset)").addOption("smaller","Smaller (80%)").setValue(this.plugin.settings.fontSize).onChange(async r=>{this.plugin.settings.fontSize=r,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Card Content Settings"}),new m.Setting(e).setName("Scrollable Properties").setDesc("Enable scrolling for card properties when they exceed the content height (Note: Square and Compact presets are scrollable by default)").addToggle(a=>a.setValue(this.plugin.settings.scrollableProperties).onChange(async r=>{this.plugin.settings.scrollableProperties=r,await this.plugin.saveSettings()})),new m.Setting(e).setName("Content Height").setDesc("Height of the scrollable content area (e.g., 200px)").addText(a=>a.setPlaceholder("200px").setValue(this.plugin.settings.contentHeight).onChange(async r=>{this.plugin.settings.contentHeight=r||"200px",await this.plugin.saveSettings()})),e.createEl("h3",{text:"Formatting Settings"}),new m.Setting(e).setName("Default Date Format").setDesc("Format for displaying dates (YYYY = year, MM = month, DD = day)").addText(a=>a.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.defaultDateFormat).onChange(async r=>{this.plugin.settings.defaultDateFormat=r||"YYYY-MM-DD",await this.plugin.saveSettings()})),e.createEl("h3",{text:"Mobile Settings"}),new m.Setting(e).setName("Mobile Preset").setDesc("Preset to use on mobile devices (all presets default to 1 column on mobile)").addDropdown(a=>a.addOption("grid","Grid (balanced)").addOption("portrait","Portrait (optimized for book covers)").addOption("square","Square (1:1 cards with minimal text)").addOption("compact","Compact (side-by-side layout)").addOption("dense","Dense (maximum density)").setValue(this.plugin.settings.mobilePreset).onChange(async r=>{this.plugin.settings.mobilePreset=r,await this.plugin.saveSettings()})),new m.Setting(e).setName("Mobile Scrollable Properties").setDesc("Enable scrolling for card properties on mobile devices").addToggle(a=>a.setValue(this.plugin.settings.mobileScrollableProperties).onChange(async r=>{this.plugin.settings.mobileScrollableProperties=r,await this.plugin.saveSettings()})),new m.Setting(e).setName("Mobile Content Height").setDesc("Height of the scrollable content area on mobile devices").addText(a=>a.setPlaceholder("150px").setValue(this.plugin.settings.mobileContentHeight).onChange(async r=>{this.plugin.settings.mobileContentHeight=r||"150px",await this.plugin.saveSettings()})),new m.Setting(e).setName("Force Mobile Mode").setDesc("Force the plugin to use mobile settings even on desktop (for testing)").addToggle(a=>a.setValue(this.plugin.settings.forceMobileMode).onChange(async r=>{this.plugin.settings.forceMobileMode=r,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Performance Settings"}),new m.Setting(e).setName("Enable Lazy Loading").setDesc("Only load images when they become visible (improves performance with many cards)").addToggle(a=>a.setValue(this.plugin.settings.enableLazyLoading).onChange(async r=>{this.plugin.settings.enableLazyLoading=r,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Developer Settings"}),new m.Setting(e).setName("Debug Mode").setDesc("Enable debug logging (only use during development or troubleshooting)").addToggle(a=>a.setValue(this.plugin.settings.debugMode).onChange(async r=>{this.plugin.settings.debugMode=r,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Help"});let t=e.createEl("div");t.innerHTML=`
      <p><strong>Basic Usage:</strong><br>
      Use the <code>datacards</code> code block to create card layouts from Dataview queries.</p>
      
      <p><strong>Example:</strong></p>
      <pre><code>
\`\`\`datacards
TABLE title, author, rating, cover FROM #books
SORT rating DESC

// Settings
preset: grid
imageFit: contain
defaultDateFormat: YYYY
\`\`\`
      </code></pre>
      
      <p><strong>Important:</strong> You must explicitly include all properties you want to display in your Dataview query (including the image property).</p>
      
      <p><strong>Image Support:</strong><br>
      The plugin supports external URLs, vault images, and wiki links:<br>
      <code>cover: https://example.com/image.jpg</code> or <code>cover: [[path/to/image.jpg]]</code></p>     
    
      <p><strong>Tip:</strong> Data Cards works best with the Editor-Setting "Readable line length" disabled. </p><br>
      
      <p><a href="https://github.com/Sophokles187/data-cards" target="_blank" rel="noopener">View complete documentation and examples on GitHub</a></p>
    `}};var s=class{static setDebugMode(n){this.debugMode=n}static error(n,...e){console.error(`[DataCards] ${n}`,...e)}static warn(n,...e){console.warn(`[DataCards] ${n}`,...e)}static debug(n,...e){this.debugMode&&console.log(`[DataCards] ${n}`,...e)}};s.debugMode=!1;var S=class{parseDataCardsBlock(n){s.debug("Parsing datacards block");let e=/\n-{3,}\n|\n\/\/\s*Settings.*|\n\/\*\s*Settings\s*\*\/.*/,t=n.match(e),a=/^\/\/\s*Settings.*/,r=n.match(a),i,o;t&&t.index!==void 0?(s.debug("Found settings separator at index:",t.index),i=n.substring(0,t.index).trim(),o=n.substring(t.index+t[0].length).trim()):r?(s.debug("Block starts with settings marker"),i="",o=n.substring(r[0].length).trim()):(s.debug("No settings separator found"),i=n.trim(),o=""),s.debug("Extracted query:",i),i=this.ensureQueryType(i);let l=this.parseSettings(o),d=this.extractColumnAliases(i);return d.length>0&&(l.columnAliases=d,s.debug("Extracted column aliases:",d)),{query:i,settings:l}}extractColumnAliases(n){let e=[];if(!n.trim().toUpperCase().startsWith("TABLE"))return e;try{let t=n.match(/TABLE\s+(without\s+id\s+)?([\s\S]*?)(?:\s+FROM|\s+WHERE|\s+SORT|\s+GROUP BY|\s+LIMIT|\s+FLATTEN|$)/i);if(!t||!t[2])return e;let a=t[2].trim();if(s.debug("Extracted columns text:",a),!a)return e;let r=this.splitColumnsPreservingExpressions(a);for(let i of r){let o=i.match(/^(.*?)\s+as\s+(?:"([^"]+)"|'([^']+)'|([^\s,]+))$/i);if(o){let l=o[1].trim(),d=o[2]||o[3]||o[4],c=l;if(/^[a-zA-Z0-9_.-]+$/.test(l))c=l;else{let g=l.match(/\(\s*".*?"\s*\+\s*([a-zA-Z0-9_.-]+)\s*\+\s*".*?"\s*\)/);g&&g[1]&&(c=g[1],s.debug(`Extracted field name from complex expression: ${c}`))}e.push({original:c,alias:d,expression:l}),s.debug(`Found column alias: ${c} as "${d}"`)}}}catch(t){s.error("Error extracting column aliases:",t)}return e}splitColumnsPreservingExpressions(n){let e=[],t="",a=0,r=!1,i=!1;for(let o=0;o<n.length;o++){let l=n[o];if(l==='"'&&!i?r=!r:l==="'"&&!r&&(i=!i),!r&&!i&&(l==="("?a++:l===")"&&a--),l===","&&a===0&&!r&&!i){e.push(t.trim()),t="";continue}t+=l}return t.trim()&&e.push(t.trim()),e}ensureQueryType(n){if(!/\b(TABLE|LIST|TASK|CALENDAR)\b/i.test(n)){let t=n.split(`
`),a=-1;for(let r=0;r<t.length;r++){let i=t[r].trim();if(i&&!i.startsWith("//")&&!i.startsWith("/*")){a=r;break}}if(a>=0){let r=this.parseSettings(t.slice(a+1).join(`
`)),i="",o=[];return r.imageProperty&&o.push(r.imageProperty),i="",s.debug("Using simple TABLE query without property list"),i.trim()===""?t[a]="TABLE "+t[a]:t[a]="TABLE"+i+" "+t[a],t.join(`
`)}else return"TABLE "+n}return n}parseSettings(n){if(!n)return{};let e={},t=n.split(`
`);s.debug("Parsing settings from text");for(let a of t){if(a.trim().startsWith("//")||a.trim().startsWith("/*")||!a.trim())continue;let r=a.match(/^\s*([a-zA-Z0-9_]+)\s*:\s*(.+)\s*$/);if(r){let[,i,o]=r;if(s.debug(`Found setting: ${i} = ${o}`),i==="properties"&&o.trim().startsWith("[")&&o.trim().endsWith("]")){s.debug("Detected properties array");let l=o.substring(1,o.length-1).trim();if(l){let d=l.split(",").map(c=>c.trim());e[i]=d}else e[i]=[]}else i==="defaultDateFormat"?e[i]=o.trim():e[i]=this.parseValue(o.trim())}}return e}parseValue(n){s.debug("Parsing value:",n);try{return JSON.parse(n)}catch(e){}if(n.startsWith("[")&&n.endsWith("]")){s.debug("Detected array syntax");let e=n.substring(1,n.length-1).trim();return e?e.split(",").map(a=>a.trim()):[]}return/^-?\d+(\.\d+)?$/.test(n)?Number(n):n.toLowerCase()==="true"?!0:n.toLowerCase()==="false"?!1:n}};var F=require("obsidian");var D=class{constructor(n,e){this.currentSettings=null;this.app=n,this.pluginSettings=e}updateSettings(n){this.pluginSettings=n}isMobileDevice(){return F.Platform.isMobile||this.pluginSettings.forceMobileMode}renderCards(n,e,t){let a=this.isMobileDevice();s.debug("Is mobile device:",a);let r={...this.pluginSettings};s.debug("Initial settings from plugin:",{preset:r.preset,imageHeight:r.imageHeight,mobileColumns:r.mobileColumns,mobilePreset:r.mobilePreset,mobileImageHeight:r.mobileImageHeight}),r={...r,...t},s.debug("After applying block settings:",{preset:r.preset,imageHeight:r.imageHeight,mobileColumns:r.mobileColumns,mobilePreset:r.mobilePreset,mobileImageHeight:r.mobileImageHeight}),a&&(s.debug("Applying mobile settings..."),s.debug(`Using mobile columns: ${r.mobileColumns}`),r.mobilePreset!==void 0&&(s.debug(`Overriding preset: ${r.preset} with mobilePreset: ${r.mobilePreset}`),r.preset=r.mobilePreset),r.mobileImageHeight!==void 0&&(s.debug(`Overriding imageHeight: ${r.imageHeight} with mobileImageHeight: ${r.mobileImageHeight}`),r.imageHeight=r.mobileImageHeight),s.debug("Final settings after applying mobile settings:",{preset:r.preset,imageHeight:r.imageHeight})),this.currentSettings=r;let i=n.createEl("div",{cls:"datacards-container"});i.addClass(`datacards-preset-${r.preset}`),r.enableShadows||i.addClass("datacards-no-shadows"),r.fontSize&&r.fontSize!=="default"?(i.addClass(`datacards-font-${r.fontSize}`),s.debug(`Applied font size class: datacards-font-${r.fontSize}`)):r.preset==="dense"&&(!r.fontSize||r.fontSize==="default")&&(i.addClass("datacards-font-small"),s.debug("Applied small font size for dense preset")),i.style.setProperty("--card-gap",`${r.cardSpacing}px`);let o;if(a)o=r.mobileColumns;else{let d=3;r.preset==="dense"?d=6:r.preset==="compact"||r.preset==="square"?d=4:r.preset==="portrait"&&(d=3),o=t.columns!==void 0?t.columns:d}s.debug(`Using ${o} columns`),i.style.setProperty("--card-columns",o.toString(),"important");let l;if(t.imageHeight!==void 0?l=r.imageHeight:r.preset==="portrait"?l="350px":r.preset==="square"||r.preset==="compact"?l="200px":r.preset==="dense"?l="120px":l="200px",(typeof l=="number"||/^\d+$/.test(l))&&(l=`${l}px`),i.style.setProperty("--image-height",l),t.imageFit!==void 0)i.style.setProperty("--image-fit",r.imageFit);else{let d=r.preset==="portrait"?"contain":"cover";i.style.setProperty("--image-fit",d)}e&&e.values&&Array.isArray(e.values)?(s.debug("Detected table-like results with values array"),this.renderTableResults(i,e,r)):e&&Array.isArray(e)?(s.debug("Detected array results"),this.renderArrayResults(i,e,r)):e&&typeof e=="object"?(s.debug("Detected object results"),this.renderObjectResults(i,e,r)):(s.debug("No valid results detected"),this.renderError(i,"No results or unsupported result type"))}renderError(n,e){let t=n.createEl("div",{cls:"datacards-error",text:e})}renderTableResults(n,e,t){let{values:a,headers:r}=e;s.debug("Rendering table results:"),s.debug("- Headers:",r),s.debug("- Number of rows:",a.length),a.forEach((i,o)=>{s.debug(`Processing row ${o}`);let l=this.createCardElement(n);if(t.imageProperty&&r.includes(t.imageProperty)){let u=r.indexOf(t.imageProperty),y=i[u];s.debug(`Image property '${t.imageProperty}' value:`,y),y&&this.addImageToCard(l,y)}else t.imageProperty&&s.debug(`Image property '${t.imageProperty}' not found in headers:`,r);let d=l.createEl("div",{cls:"datacards-content"});if(r.includes("File")||r.includes("file")){let u=r.findIndex(y=>y.toLowerCase()==="file");if(u>=0){let y=i[u];s.debug("File property value:",y);let f=d.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(f,y)}}let c=d.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(t)){c.addClass("datacards-scrollable-properties");let u=this.getContentHeight(t);c.style.setProperty("--content-height",u)}let p=[];t.properties==="all"?(p=[...r],s.debug("Using all headers as properties:",p)):Array.isArray(t.properties)?(p=[...t.properties],s.debug("Using specified properties:",p)):s.debug("No properties specified, using empty array");let x=p.filter(u=>!t.exclude.includes(u)&&u!==t.imageProperty&&u.toLowerCase()!=="file");s.debug("Filtered properties (after excluding file):",x),x.forEach(u=>{if(s.debug(`Checking property '${u}' in headers:`,r.includes(u)),r.includes(u)){let y=r.indexOf(u),f=i[y];if(console.log(`Property '${u}' value:`,f),console.log(`Property '${u}' type:`,typeof f),typeof f=="string"&&f.includes("[[")&&f.includes("]]")){console.log(`Found wiki link in property '${u}':`,f);let P=c.createEl("div",{cls:"datacards-property"});t.showLabels&&P.createEl("div",{cls:"datacards-property-label",text:u});let M=P.createEl("div",{cls:"datacards-property-value"}),T=f.match(/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/);if(T){let w=T[1],L=T[2]||this.getCleanFilename(w);console.log(`Creating direct link for wiki link: path="${w}", display="${L}"`);let H=M.createEl("a",{cls:"internal-link",text:L,attr:{href:w,"data-href":w,"data-type":"link"}});this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:H,targetEl:H,linktext:w})}else M.setText(f)}else this.addPropertyToCard(c,u,f,t)}else s.debug(`Property '${u}' not found in headers`)}),x.length===0&&!r.some(u=>u.toLowerCase()==="file")&&(s.debug("No properties were added to the card"),d.createEl("div",{cls:"datacards-property",text:"No properties to display"}))})}renderArrayResults(n,e,t){e.forEach(a=>{let r=this.createCardElement(n);t.imageProperty&&a[t.imageProperty]&&this.addImageToCard(r,a[t.imageProperty]);let i=r.createEl("div",{cls:"datacards-content"});if("file"in a){let p=i.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(p,a.file)}let o=i.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(t)){o.addClass("datacards-scrollable-properties");let p=this.getContentHeight(t);o.style.setProperty("--content-height",p)}let d=Object.keys(a);(t.properties==="all"?d:Array.isArray(t.properties)?t.properties:[]).filter(p=>!t.exclude.includes(p)&&p!==t.imageProperty&&p.toLowerCase()!=="file").forEach(p=>{p in a&&this.addPropertyToCard(o,p,a[p],t)})})}renderObjectResults(n,e,t){let a=this.createCardElement(n);t.imageProperty&&e[t.imageProperty]&&this.addImageToCard(a,e[t.imageProperty]);let r=a.createEl("div",{cls:"datacards-content"});if("file"in e){let g=r.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(g,e.file)}let i=r.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(t)){i.addClass("datacards-scrollable-properties");let g=this.getContentHeight(t);i.style.setProperty("--content-height",g)}let l=Object.keys(e);(t.properties==="all"?l:Array.isArray(t.properties)?t.properties:[]).filter(g=>!t.exclude.includes(g)&&g!==t.imageProperty&&g.toLowerCase()!=="file").forEach(g=>{g in e&&this.addPropertyToCard(i,g,e[g],t)})}createCardElement(n){return n.createEl("div",{cls:"datacards-card"})}addImageToCard(n,e){var i;let t=n.createEl("div",{cls:"datacards-image-container"}),a;typeof e=="object"&&e!==null?(s.debug("Image value is an object:",e),"path"in e?(a=e.path,s.debug("Extracted path from Link object:",a)):(a=String(e),s.debug("Converted object to string:",a))):(a=String(e),s.debug("Image value is a string:",a)),a=this.extractImageSource(a),s.debug("After image source extraction:",a);let r=t.createEl("div",{cls:"datacards-image-placeholder",text:"Loading image..."});(i=this.currentSettings)!=null&&i.enableLazyLoading?this.lazyLoadImage(t,r,a):this.loadImage(t,r,a)}extractImageSource(n){if(!n||typeof n!="string")return String(n||"");let e=n.match(/!\[(.*?)\]\((.*?)\)/);if(e){let r=e[2];return s.debug("Extracted URL from markdown image syntax:",r),r.replace(/['",.;:]+$/,"")}let t=n.match(/\[\[(.*?)\]\]/);if(t){let r=`[[${t[1]}]]`;return s.debug("Extracted wiki link:",r),r}let a=n.match(/(https?:\/\/[^\s"'<>[\]{}]+)/);if(a){let r=a[1];return s.debug("Extracted URL:",r),r.replace(/['",.;:]+$/,"")}return n}lazyLoadImage(n,e,t){s.debug("Lazy loading image:",t),new IntersectionObserver((r,i)=>{r.forEach(o=>{o.isIntersecting&&(s.debug("Image container is now visible, loading image:",t),this.loadImage(n,e,t),i.disconnect())})},{rootMargin:"100px",threshold:.1}).observe(n)}loadImage(n,e,t){let a=t.match(/!\[(.*?)\]\((.*?)\)/);if(a){let r=a[2];s.debug("Extracted URL from markdown image syntax:",r),this.loadImage(n,e,r);return}if(t.startsWith("http")||t.startsWith("https")){s.debug("Handling as external URL:",t);let r=t.replace(/['",.;:]+$/,"");s.debug("Cleaned URL:",r),this.loadExternalImage(n,e,r)}else if(t.startsWith("[[")&&t.endsWith("]]")){s.debug("Handling as wiki link");let r=t.substring(2,t.length-2),i=r;r.includes("|")&&(i=r.split("|")[0]);try{let o=this.app.vault.getAbstractFileByPath(i);if(o&&"stat"in o){s.debug("Found file in vault:",o);let l=o,d=this.app.vault.getResourcePath(l);s.debug("Resource path:",d);let c=n.createEl("img",{cls:"datacards-image",attr:{src:d}});c.onload=()=>{e.remove(),c.addClass("loaded")},c.onerror=()=>{e.setText("Image not found")}}else s.debug("File not found in vault or not a file:",i),e.setText("Image not found")}catch(o){s.error("Error loading image:",o),e.setText("Error loading image")}}else{s.debug("Handling as local path");try{let r=this.app.vault.getAbstractFileByPath(t);if(r&&"stat"in r){s.debug("Found file in vault:",r);let i=r,o=this.app.vault.getResourcePath(i);s.debug("Resource path:",o);let l=n.createEl("img",{cls:"datacards-image",attr:{src:o}});l.onload=()=>{e.remove(),l.addClass("loaded")},l.onerror=()=>{e.setText("Image not found")}}else s.debug("File not found in vault:",t),e.setText("Image not found")}catch(r){s.error("Error loading image:",r),e.setText("Error loading image")}}}loadExternalImage(n,e,t){s.debug("Loading external image with URL:",t);let a=n.createEl("img",{cls:"datacards-image",attr:{src:t,crossorigin:"anonymous"}});a.onload=()=>{s.debug("External image loaded successfully:",t),e.remove(),a.addClass("loaded")},a.onerror=r=>{s.error("Failed to load external image with crossorigin attribute:",t,r),s.debug("Trying again without crossorigin attribute"),a.removeAttribute("crossorigin"),a.onload=()=>{s.debug("External image loaded successfully without crossorigin:",t),e.remove(),a.addClass("loaded")},a.onerror=i=>{s.error("Failed to load external image without crossorigin:",t,i);let o=`https://images.weserv.nl/?url=${encodeURIComponent(t)}`;s.debug("Trying with image proxy service:",o),a.src=o,a.onload=()=>{s.debug("External image loaded successfully via proxy:",o),e.remove(),a.addClass("loaded")},a.onerror=l=>{s.error("All attempts to load image failed:",t,l),e.setText("Image not found - URL: "+t);try{let d=document.createElement("img");d.style.display="none",d.src=t,document.body.appendChild(d),setTimeout(()=>{document.body.contains(d)&&document.body.removeChild(d)},3e3)}catch(d){s.error("Error during final test:",d)}}}}}addPropertyToCard(n,e,t,a){s.debug(`Adding property to card: ${e} = ${t}`),s.debug(`Property type: ${typeof t}`);let r=n.createEl("div",{cls:"datacards-property"});a.propertiesAlign&&r.addClass(`datacards-text-${a.propertiesAlign}`);let i=e;if(a.columnAliases){let o=a.columnAliases.find(l=>l.original===e);o&&(i=o.alias,s.debug(`Using alias "${i}" for property "${e}"`))}if(a.showLabels){let o=r.createEl("div",{cls:"datacards-property-label",text:i});a.propertiesAlign&&o.addClass(`datacards-text-${a.propertiesAlign}`)}if(e.toLowerCase()==="file")this.formatFileProperty(r,t);else{let o=a.propertyFormatters[e];o?this.formatPropertyWithCustomFormatter(r,t,o):this.formatPropertyByType(r,t)}}formatPropertyWithCustomFormatter(n,e,t){let a=n.createEl("div",{cls:"datacards-property-value"});switch(t.type){case"stars":this.formatAsStars(a,e,t.options);break;case"badge":this.formatAsBadge(a,e,t.options);break;case"progress":this.formatAsProgress(a,e,t.options);break;case"date":this.formatAsDate(a,e,t.options);break;case"tags":this.formatAsTags(a,e,t.options);break;default:a.setText(String(e))}}formatPropertyByType(n,e){s.debug("formatPropertyByType called with value:",e),s.debug("Value type:",typeof e),typeof e=="string"&&(s.debug("String value length:",e.length),s.debug("String value exact content:",JSON.stringify(e)));let t=n.createEl("div",{cls:"datacards-property-value"});if(n.hasClass("datacards-text-left")?t.addClass("datacards-text-left"):n.hasClass("datacards-text-center")?t.addClass("datacards-text-center"):n.hasClass("datacards-text-right")&&t.addClass("datacards-text-right"),e==null)t.setText("");else if(Array.isArray(e))t.setText(e.join(", "));else if(typeof e=="boolean"){let a=t.createEl("input",{attr:{type:"checkbox",checked:e?"checked":"",disabled:"disabled"}})}else if(typeof e=="number")t.setText(e.toString());else if(e instanceof Date)this.formatAsDate(t,e);else if(typeof e=="string"){if(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{2}:\d{2}$/.test(e)||/^\d{4}-\d{2}-\d{2}$/.test(e)){let o=new Date(e);if(!isNaN(o.getTime())){this.formatAsDate(t,o);return}}let r=this.extractImageSource(e);if(r!==e){this.formatPropertyByType(n,r);return}if(typeof e=="string"&&e.includes("[[")&&e.includes("|")&&e.includes("]]")){let o=e.match(/\[\[.*\|(.*?)\]\]/);if(o&&o[1]){t.setText(o[1]);return}}if(e.includes("[[")&&e.includes("]]")){console.log("DATACARDS DEBUG: Found wiki link in property value:",e),s.debug("Found wiki link in property value:",e);let o=/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/,l=e.match(o);if(l){console.log("DATACARDS DEBUG: Wiki link match:",l),s.debug("Wiki link match:",l);let d=l[1],c=l[2]||this.getCleanFilename(d);console.log(`DATACARDS DEBUG: Wiki link path: "${d}", display text: "${c}"`),s.debug(`Wiki link path: "${d}", display text: "${c}"`),console.log("DATACARDS DEBUG: Creating link element for wiki link");let g=t.createEl("a",{cls:"internal-link datacards-file-link",text:c,attr:{href:d,"data-href":d,"data-type":"link"}});console.log("DATACARDS DEBUG: Link element created:",g),this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:g,targetEl:g,linktext:d});return}}let i=e.match(/!\[(.*?)\]\((.*?)\)/);if(i){s.debug("Found markdown image in property value");let o=i[2],l=i[1];t.addClass("loading");let d=t.createEl("img",{cls:"datacards-property-image loading",attr:{src:o,alt:l||"Image",crossorigin:"anonymous"}});d.onload=()=>{s.debug("Property image loaded successfully:",o),d.removeClass("loading")},d.onerror=()=>{s.error("Failed to load property image:",o),d.remove(),t.removeClass("loading"),t.addClass("image-error"),t.setText("Image not found: "+o)};return}if(e.startsWith("[[")&&e.endsWith("]]")){console.log("DATACARDS DEBUG: Processing wiki link that starts and ends with [[]]:",e),s.debug("Processing wiki link that starts and ends with [[]]:",e);let o=/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/,l=e.match(o);if(l){let d=l[1],c=l[2]||this.getCleanFilename(d);console.log(`DATACARDS DEBUG: Wiki link path: "${d}", display text: "${c}"`),s.debug(`Wiki link path: "${d}", display text: "${c}"`),console.log("DATACARDS DEBUG: Creating link element for wiki link (direct match)");let g=t.createEl("a",{cls:"internal-link datacards-file-link",text:c,attr:{href:d,"data-href":d,"data-type":"link"}});console.log("DATACARDS DEBUG: Link element created (direct match):",g),this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:g,targetEl:g,linktext:d})}else{let d=e.substring(2,e.length-2),c=d,g=d;if(d.includes("|")){let x=d.split("|");g=x[0],c=x[1]}else c=this.getCleanFilename(g);s.debug(`Fallback wiki link path: "${g}", display text: "${c}"`);let p=t.createEl("a",{cls:"internal-link datacards-file-link",text:c,attr:{href:g,"data-href":g,"data-type":"link"}});this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:p,targetEl:p,linktext:g})}}else if(e.startsWith("#")){let o=t.createEl("a",{cls:"datacards-tag tag-link",text:e,attr:{href:e,"data-href":e,"data-type":"tag"}})}else/<[ubia]>|<\/[ubia]>|<span|<div|<p>|<\/p>|<br>|<hr>/.test(e)?(console.log("DATACARDS DEBUG: Rendering HTML content:",e),t.innerHTML=e):t.setText(e)}else if(typeof e=="object"&&e!==null){if("path"in e&&"type"in e&&e.type==="file"){console.log("Handling Dataview Link object:",e);let a=e.path,r=e.display||this.getCleanFilename(a);console.log(`Creating link from Dataview Link object: path="${a}", display="${r}"`);let i=t.createEl("a",{cls:"internal-link",text:r,attr:{href:a,"data-href":a,"data-type":"link"}});this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:i,targetEl:i,linktext:a});return}if("ts"in e&&typeof e.ts=="number"){let a=new Date(e.ts);if(!isNaN(a.getTime())){this.formatAsDate(t,a);return}}t.setText(String(e))}else t.setText(String(e))}formatAsStars(n,e,t){let a=(t==null?void 0:t.max)||5,r="\u2605",i="\u2606",o=n.createEl("div",{cls:"datacards-stars"}),l=Math.min(Math.max(0,e),a);for(let d=0;d<l;d++)o.createEl("span",{cls:"datacards-star datacards-star-full",text:r});for(let d=l;d<a;d++)o.createEl("span",{cls:"datacards-star datacards-star-empty",text:i})}formatAsBadge(n,e,t){let a=n.createEl("span",{cls:"datacards-badge",text:e});t!=null&&t.color&&(a.style.backgroundColor=t.color)}formatAsProgress(n,e,t){let a=(t==null?void 0:t.max)||100,r=Math.min(Math.max(0,e),a)/a*100,i=n.createEl("div",{cls:"datacards-progress-container"}),o=i.createEl("div",{cls:"datacards-progress-bar"});o.style.width=`${r}%`,t!=null&&t.showText&&i.createEl("span",{cls:"datacards-progress-text",text:`${Math.round(r)}%`})}formatAsDate(n,e,t){let a=typeof e=="string"?new Date(e):e;if(isNaN(a.getTime())){n.setText(String(e));return}let r=(t==null?void 0:t.format)||(this.currentSettings?this.currentSettings.defaultDateFormat:v.defaultDateFormat),i=a.getFullYear(),o=(a.getMonth()+1).toString().padStart(2,"0"),l=a.getDate().toString().padStart(2,"0"),d=r.replace("YYYY",i.toString()).replace("MM",o).replace("DD",l);n.setText(d)}formatFileProperty(n,e){var r;let t=n.createEl("div",{cls:"datacards-property-value datacards-file-property"});if((r=this.currentSettings)!=null&&r.titleAlign?t.addClass(`datacards-text-${this.currentSettings.titleAlign}`):n.hasClass("datacards-text-left")?t.addClass("datacards-text-left"):n.hasClass("datacards-text-center")?t.addClass("datacards-text-center"):n.hasClass("datacards-text-right")&&t.addClass("datacards-text-right"),e==null){t.setText("");return}let a;if(typeof e=="object"&&e!==null?"path"in e?a=e.path:"link"in e?a=e.link:a=String(e):a=String(e),a=this.extractImageSource(a),s.debug("File property after image source extraction:",a),typeof e=="string"&&e.includes("[[")&&e.includes("|")&&e.includes("]]")){console.log("DATACARDS DEBUG: Found wiki link with pipe character:",e);let i=e.match(/\[\[.*\|(.*?)\]\]/);if(i&&i[1]){console.log("DATACARDS DEBUG: Extracted display text:",i[1]);let o=e.match(/\[\[(.*?)\|(.*?)\]\]/);if(o){let l=o[1],d=o[2];console.log(`DATACARDS DEBUG: Creating link from pipe syntax - path: "${l}", display: "${d}"`);let c=t.createEl("a",{cls:"internal-link datacards-file-link",text:d,attr:{href:l,"data-href":l,"data-type":"link"}});console.log("DATACARDS DEBUG: Created link element for pipe syntax:",c),this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:c,targetEl:c,linktext:l});return}else{console.log("DATACARDS DEBUG: Fallback to text only for pipe syntax"),t.setText(i[1]);return}}}if(a.includes("[[")&&a.includes("]]")){s.debug("Found wiki link in file property:",a);let i=a.match(/\[\[([^\]]+)\]\]/);if(i){let o=i[1],l=o,d=o;if(o.includes("|")){let g=o.split("|");d=g[0],l=g[1]}else l=this.getCleanFilename(d);let c=t.createEl("a",{cls:"internal-link datacards-file-link",text:l,attr:{href:d,"data-href":d,"data-type":"link"}});return}}else if(a.startsWith("[[")&&a.endsWith("]]")){let i=a.substring(2,a.length-2),o=i,l=i;if(i.includes("|")){let c=i.split("|");l=c[0],o=c[1]}else o=this.getCleanFilename(l);let d=t.createEl("a",{cls:"internal-link datacards-file-link",text:o,attr:{href:l,"data-href":l,"data-type":"link"}})}else{let i=this.getCleanFilename(a),o=t.createEl("a",{cls:"internal-link datacards-file-link",text:i,attr:{href:a,"data-href":a,"data-type":"link"}})}}getCleanFilename(n){let e=n;return e.includes("/")&&(e=e.split("/").pop()||e),e.endsWith(".md")&&(e=e.substring(0,e.length-3)),e}formatAsTags(n,e,t){let a=n.createEl("div",{cls:"datacards-tags-container"});(Array.isArray(e)?e:[e]).forEach(i=>{let o=i.startsWith("#")?i:`#${i}`,l=a.createEl("a",{cls:"datacards-tag tag-link",text:o,attr:{href:o,"data-href":o,"data-type":"tag"}})})}shouldUseScrollableProperties(n){let e=!1;return(n.preset==="square"||n.preset==="compact")&&(e=!0),this.pluginSettings.scrollableProperties!==void 0&&(e=this.pluginSettings.scrollableProperties),this.isMobileDevice()&&this.pluginSettings.mobileScrollableProperties!==void 0&&(e=this.pluginSettings.mobileScrollableProperties),n.scrollableProperties!==void 0&&(e=n.scrollableProperties),e}getContentHeight(n){let e="200px";return this.pluginSettings.contentHeight&&(e=this.pluginSettings.contentHeight),this.isMobileDevice()&&this.pluginSettings.mobileContentHeight&&(e=this.pluginSettings.mobileContentHeight),n.contentHeight&&(e=n.contentHeight),e}};var C=class{constructor(n){this.plugin=n}isDataviewEnabled(){return this.plugin.app.plugins.plugins.dataview!==void 0}getDataviewApi(){return this.isDataviewEnabled()?this.plugin.app.plugins.plugins.dataview.api:null}async executeQuery(n,e,t){let a=this.getDataviewApi();if(!a)return null;try{return await a.query(n,e,t)}catch(r){throw s.error("Error executing Dataview query:",r),r}}async waitForDataviewReady(){let n=this.getDataviewApi();return n?n.index&&n.index.initialized?(s.debug("Dataview index is already initialized"),!0):(s.debug("Waiting for Dataview index to be ready..."),new Promise(e=>{let t=this.plugin.app,a=t.metadataCache.on("dataview:index-ready",()=>{s.debug("Dataview index is now ready"),t.metadataCache.offref(a),e(!0)});setTimeout(()=>{s.warn("Timed out waiting for Dataview index"),t.metadataCache.offref(a),e(!1)},5e3)})):!1}async executeSafeQuery(n,e,t,a=0){let r=this.getDataviewApi();if(!r)return s.error("Dataview API not found. Make sure Dataview plugin is enabled."),{successful:!1,value:"Dataview plugin is not enabled"};if(!n||n.trim()==="")return s.error("Empty Dataview query"),{successful:!1,value:"Empty query"};s.debug("Executing Dataview query:",n),s.debug("Source path:",e);try{if(typeof r.query=="function"){s.debug("Using api.query method");try{let i=await r.query(n,e,t);return s.debug("Direct query result type:",typeof i),i==null?(s.error("Direct query returned undefined or null"),{successful:!1,value:"No results returned"}):(i&&typeof i=="object"&&("values"in i&&Array.isArray(i.values)&&s.debug("Result contains a values array with length:",i.values.length),"headers"in i&&Array.isArray(i.headers)&&s.debug("Result contains headers:",i.headers)),i&&typeof i=="object"&&"values"in i&&Array.isArray(i.values)&&i.values.length===0&&a<3?(s.debug(`Empty result, retrying (attempt ${a+1}/3)...`),new Promise(o=>{setTimeout(async()=>{let l=await this.executeSafeQuery(n,e,t,a+1);o(l)},500)})):{successful:!0,value:i})}catch(i){return s.error("Error in direct query:",i),{successful:!1,value:i?i.message||String(i):"Error in query execution"}}}else return s.error("Dataview API query method not found."),{successful:!1,value:"Incompatible Dataview API version"}}catch(i){return s.error("Error executing Dataview query:",i),{successful:!1,value:i?i.message||String(i):"Unknown error"}}}};var k=class extends b.Plugin{async onload(){await this.loadSettings(),s.setDebugMode(this.settings.debugMode),this.parserService=new S,this.rendererService=new D(this.app,this.settings),this.dataviewApiUtil=new C(this),this.registerMarkdownCodeBlockProcessor("datacards",this.processDataCardsBlock.bind(this)),this.addSettingTab(new E(this.app,this)),this.addCommand({id:"refresh-datacards",name:"Refresh all DataCards",callback:()=>{this.refreshAllDataCards()}}),s.debug("DataCards plugin loaded")}onunload(){s.debug("DataCards plugin unloaded")}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings),s.setDebugMode(this.settings.debugMode),this.rendererService.updateSettings(this.settings),this.refreshAllDataCards()}async processDataCardsBlock(e,t,a){if(s.debug("Processing DataCards block"),!this.dataviewApiUtil.isDataviewEnabled()){s.error("Dataview plugin is not enabled"),t.createEl("div",{cls:"datacards-error",text:"Dataview plugin is required but not enabled"});return}await this.dataviewApiUtil.waitForDataviewReady()||s.warn("Timed out waiting for Dataview to be ready");try{let{query:i,settings:o}=this.parserService.parseDataCardsBlock(e);s.debug("Parsed query:",i),s.debug("Parsed settings:",o);let l=a.sourcePath,d=document.createElement("div");d.style.display="none",document.body.appendChild(d);try{s.debug("Executing Dataview query");let c=await this.dataviewApiUtil.executeSafeQuery(i,l,d);if(document.body.removeChild(d),!c){s.error("Result is undefined or null"),t.createEl("div",{cls:"datacards-error",text:"Error executing Dataview query: undefined result"});return}if(!c.successful){let p=`Error executing Dataview query: ${c.value||"unknown error"}`;s.error(p),t.createEl("div",{cls:"datacards-error",text:p});return}if(c.value&&typeof c.value=="object"&&"successful"in c.value&&c.value.successful===!1){let p=`Error executing Dataview query: ${c.value.error||"unknown error"}`;s.error(p),t.createEl("div",{cls:"datacards-error",text:p});return}if(c.value===void 0||c.value===null){s.error("Dataview returned null or undefined value"),t.createEl("div",{cls:"datacards-error",text:"Dataview returned no results. Make sure your query is correct and returns data."});return}if(Array.isArray(c.value)&&c.value.length===0){s.debug("Dataview returned empty array"),t.createEl("div",{cls:"datacards-info",text:"No files match your query criteria."});return}if(c.value.values&&Array.isArray(c.value.values)&&c.value.values.length===0){s.debug("Dataview returned empty table"),t.createEl("div",{cls:"datacards-info",text:"No files match your query criteria."});return}let g=c.value;g&&typeof g=="object"&&"successful"in g&&"value"in g&&(s.debug("Unwrapping nested result structure"),g=g.value),this.rendererService.renderCards(t,g,o)}catch(c){s.error("Error executing Dataview query:",c),document.body.contains(d)&&document.body.removeChild(d),t.createEl("div",{cls:"datacards-error",text:`Error executing Dataview query: ${c.message||String(c)}`})}}catch(i){s.error("DataCards error:",i),t.createEl("div",{cls:"datacards-error",text:`Error processing DataCards block: ${i.message||String(i)}`})}}refreshAllDataCards(){let e=this.app.workspace.getActiveViewOfType(b.MarkdownView);e?(e.previewMode.rerender(!0),new b.Notice("DataCards refreshed",3e3)):new b.Notice("No active markdown view to refresh",3e3)}};
