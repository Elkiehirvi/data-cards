/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin-
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DataCardsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/models/settings.ts
var DEFAULT_SETTINGS = {
  // Preset settings
  preset: "grid",
  // Image settings
  imageProperty: "cover",
  imageHeight: "200px",
  imageFit: "cover",
  // Content settings
  properties: "all",
  exclude: [],
  scrollableProperties: false,
  // Default to non-scrollable for most presets
  contentHeight: "200px",
  // Default height for scrollable content
  // Display settings
  showLabels: true,
  cardSpacing: 16,
  enableShadows: true,
  propertiesAlign: "left",
  // Default to left alignment
  titleAlign: "left",
  // Default to left alignment
  fontSize: "default",
  // Default font size
  // Formatting settings
  defaultDateFormat: "YYYY-MM-DD",
  propertyFormatters: {},
  // Mobile settings
  mobileColumns: 1,
  mobilePreset: "grid",
  mobileImageHeight: "150px",
  mobileScrollableProperties: true,
  // Default to scrollable on mobile
  mobileContentHeight: "150px",
  // Default height for mobile scrollable content
  forceMobileMode: false,
  // Disabled by default
  // Performance settings
  enableLazyLoading: false,
  // Update settings
  enableDynamicUpdates: false,
  // Disabled by default to avoid performance issues
  // Debug settings
  debugMode: false
  // Disabled by default
};

// src/ui/settings-tab.ts
var import_obsidian = require("obsidian");
var DataCardsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "DataCards Settings" });
    containerEl.createEl("h3", { text: "Preset Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Preset").setDesc("Choose the default preset for cards").addDropdown((dropdown) => dropdown.addOption("grid", "Grid (balanced, 3 columns)").addOption("portrait", "Portrait (optimized for book covers, 3 columns)").addOption("square", "Square (1:1 cards with minimal text, 4 columns)").addOption("compact", "Compact (side-by-side layout, 4 columns)").addOption("dense", "Dense (maximum density, 6 columns)").setValue(this.plugin.settings.preset).onChange(async (value) => {
      this.plugin.settings.preset = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Image Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Image Property").setDesc("The frontmatter property to use for images").addText((text) => text.setPlaceholder("cover").setValue(this.plugin.settings.imageProperty).onChange(async (value) => {
      this.plugin.settings.imageProperty = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Display Settings" });
    new import_obsidian.Setting(containerEl).setName("Show Property Labels").setDesc("Show labels for properties").addToggle((toggle) => toggle.setValue(this.plugin.settings.showLabels).onChange(async (value) => {
      this.plugin.settings.showLabels = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Card Spacing").setDesc("Space between cards (in pixels)").addSlider((slider) => slider.setLimits(0, 32, 4).setValue(this.plugin.settings.cardSpacing).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.cardSpacing = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Enable Card Shadows").setDesc("Add subtle shadows to cards for a more three-dimensional appearance").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableShadows).onChange(async (value) => {
      this.plugin.settings.enableShadows = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Properties Alignment").setDesc("Text alignment for properties and their labels").addDropdown((dropdown) => dropdown.addOption("left", "Left").addOption("center", "Center").addOption("right", "Right").setValue(this.plugin.settings.propertiesAlign).onChange(async (value) => {
      this.plugin.settings.propertiesAlign = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Title Alignment").setDesc("Text alignment for the title (filename)").addDropdown((dropdown) => dropdown.addOption("left", "Left").addOption("center", "Center").addOption("right", "Right").setValue(this.plugin.settings.titleAlign).onChange(async (value) => {
      this.plugin.settings.titleAlign = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Font Size").setDesc("Text size for all card elements (properties, labels, and title)").addDropdown((dropdown) => dropdown.addOption("larger", "Larger (120%)").addOption("large", "Large (110%)").addOption("default", "Default (100%)").addOption("small", "Small (90% - similar to dense preset)").addOption("smaller", "Smaller (80%)").setValue(this.plugin.settings.fontSize).onChange(async (value) => {
      this.plugin.settings.fontSize = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Card Content Settings" });
    new import_obsidian.Setting(containerEl).setName("Scrollable Properties").setDesc("Enable scrolling for card properties when they exceed the content height (Note: Square and Compact presets are scrollable by default)").addToggle((toggle) => toggle.setValue(this.plugin.settings.scrollableProperties).onChange(async (value) => {
      this.plugin.settings.scrollableProperties = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Content Height").setDesc("Height of the scrollable content area (e.g., 200px)").addText((text) => text.setPlaceholder("200px").setValue(this.plugin.settings.contentHeight).onChange(async (value) => {
      this.plugin.settings.contentHeight = value || "200px";
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Formatting Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Date Format").setDesc("Format for displaying dates (YYYY = year, MM = month, DD = day)").addText((text) => text.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.defaultDateFormat).onChange(async (value) => {
      this.plugin.settings.defaultDateFormat = value || "YYYY-MM-DD";
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Mobile Settings" });
    new import_obsidian.Setting(containerEl).setName("Mobile Preset").setDesc("Preset to use on mobile devices (all presets default to 1 column on mobile)").addDropdown((dropdown) => dropdown.addOption("grid", "Grid (balanced)").addOption("portrait", "Portrait (optimized for book covers)").addOption("square", "Square (1:1 cards with minimal text)").addOption("compact", "Compact (side-by-side layout)").addOption("dense", "Dense (maximum density)").setValue(this.plugin.settings.mobilePreset).onChange(async (value) => {
      this.plugin.settings.mobilePreset = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Mobile Scrollable Properties").setDesc("Enable scrolling for card properties on mobile devices").addToggle((toggle) => toggle.setValue(this.plugin.settings.mobileScrollableProperties).onChange(async (value) => {
      this.plugin.settings.mobileScrollableProperties = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Mobile Content Height").setDesc("Height of the scrollable content area on mobile devices").addText((text) => text.setPlaceholder("150px").setValue(this.plugin.settings.mobileContentHeight).onChange(async (value) => {
      this.plugin.settings.mobileContentHeight = value || "150px";
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Force Mobile Mode").setDesc("Force the plugin to use mobile settings even on desktop (for testing)").addToggle((toggle) => toggle.setValue(this.plugin.settings.forceMobileMode).onChange(async (value) => {
      this.plugin.settings.forceMobileMode = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Performance Settings" });
    new import_obsidian.Setting(containerEl).setName("Enable Lazy Loading").setDesc("Only load images when they become visible (improves performance with many cards)").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableLazyLoading).onChange(async (value) => {
      this.plugin.settings.enableLazyLoading = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Update Settings" });
    new import_obsidian.Setting(containerEl).setName("Enable Dynamic Updates").setDesc("Automatically update DataCards when properties change (may impact performance)").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableDynamicUpdates).onChange(async (value) => {
      this.plugin.settings.enableDynamicUpdates = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Per-Card Dynamic Updates").setDesc('Individual cards can override the global setting with "dynamicUpdate: true/false" in their settings').setDisabled(true);
    containerEl.createEl("h3", { text: "Developer Settings" });
    new import_obsidian.Setting(containerEl).setName("Debug Mode").setDesc("Enable debug logging (only use during development or troubleshooting)").addToggle((toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
      this.plugin.settings.debugMode = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Help" });
    const helpText = containerEl.createEl("div");
    helpText.innerHTML = `
      <p><strong>Basic Usage:</strong><br>
      Use the <code>datacards</code> code block to create card layouts from Dataview queries.</p>
      
      <p><strong>Example:</strong></p>
      <pre><code>
\`\`\`datacards
TABLE title, author, rating, cover FROM #books
SORT rating DESC

// Settings
preset: grid
imageFit: contain
defaultDateFormat: YYYY
\`\`\`
      </code></pre>
      
      <p><strong>Important:</strong> You must explicitly include all properties you want to display in your Dataview query (including the image property).</p>
      
      <p><strong>Image Support:</strong><br>
      The plugin supports external URLs, vault images, and wiki links:<br>
      <code>cover: https://example.com/image.jpg</code> or <code>cover: [[path/to/image.jpg]]</code></p>     
    
      <p><strong>Tip:</strong> Data Cards works best with the Editor-Setting "Readable line length" disabled. </p><br>
      
      <p><a href="https://github.com/Sophokles187/data-cards" target="_blank" rel="noopener">View complete documentation and examples on GitHub</a></p>
    `;
  }
};

// src/utils/logger.ts
var Logger = class {
  /**
   * Enable or disable debug mode
   * When disabled, debug logs won't be shown
   * 
   * @param enabled Whether debug mode should be enabled
   */
  static setDebugMode(enabled) {
    this.debugMode = enabled;
  }
  /**
   * Log an error message
   * These are always shown regardless of debug mode
   * 
   * @param message The error message
   * @param args Additional arguments to log
   */
  static error(message, ...args) {
    console.error(`[DataCards] ${message}`, ...args);
  }
  /**
   * Log a warning message
   * These are always shown regardless of debug mode
   * 
   * @param message The warning message
   * @param args Additional arguments to log
   */
  static warn(message, ...args) {
    console.warn(`[DataCards] ${message}`, ...args);
  }
  /**
   * Log a debug message
   * These are only shown when debug mode is enabled
   * 
   * @param message The debug message
   * @param args Additional arguments to log
   */
  static debug(message, ...args) {
    if (this.debugMode) {
      console.log(`[DataCards] ${message}`, ...args);
    }
  }
};
Logger.debugMode = false;

// src/services/parser.ts
var ParserService = class {
  /**
   * Parse a datacards code block content
   * Separates the query from the settings section
   * 
   * @param source The content of the datacards code block
   * @returns An object containing the query and settings
   */
  parseDataCardsBlock(source) {
    Logger.debug("Parsing datacards block");
    const separatorRegex = /\n-{3,}\n|\n\/\/\s*Settings.*|\n\/\*\s*Settings\s*\*\/.*/;
    const separatorMatch = source.match(separatorRegex);
    const startsWithSettingsRegex = /^\/\/\s*Settings.*/;
    const startsWithSettingsMatch = source.match(startsWithSettingsRegex);
    let query;
    let settingsText;
    if (separatorMatch && separatorMatch.index !== void 0) {
      Logger.debug("Found settings separator at index:", separatorMatch.index);
      query = source.substring(0, separatorMatch.index).trim();
      settingsText = source.substring(separatorMatch.index + separatorMatch[0].length).trim();
    } else if (startsWithSettingsMatch) {
      Logger.debug("Block starts with settings marker");
      query = "";
      settingsText = source.substring(startsWithSettingsMatch[0].length).trim();
    } else {
      Logger.debug("No settings separator found");
      query = source.trim();
      settingsText = "";
    }
    Logger.debug("Extracted query:", query);
    query = this.ensureQueryType(query);
    const settings = this.parseSettings(settingsText);
    const columnAliases = this.extractColumnAliases(query);
    if (columnAliases.length > 0) {
      settings.columnAliases = columnAliases;
      Logger.debug("Extracted column aliases:", columnAliases);
    }
    return { query, settings };
  }
  /**
   * Extract column aliases from a Dataview query
   * Handles both simple aliases (field as "Alias") and complex expressions
   * 
   * @param query The Dataview query
   * @returns Array of column aliases
   */
  extractColumnAliases(query) {
    const aliases = [];
    if (!query.trim().toUpperCase().startsWith("TABLE")) {
      return aliases;
    }
    try {
      const tableMatch = query.match(/TABLE\s+(without\s+id\s+)?([\s\S]*?)(?:\s+FROM|\s+WHERE|\s+SORT|\s+GROUP BY|\s+LIMIT|\s+FLATTEN|$)/i);
      if (!tableMatch || !tableMatch[2]) {
        return aliases;
      }
      const columnsText = tableMatch[2].trim();
      Logger.debug("Extracted columns text:", columnsText);
      if (!columnsText) {
        return aliases;
      }
      const columns = this.splitColumnsPreservingExpressions(columnsText);
      for (const column of columns) {
        const asMatch = column.match(/^(.*?)\s+as\s+(?:"([^"]+)"|'([^']+)'|([^\s,]+))$/i);
        if (asMatch) {
          const expression = asMatch[1].trim();
          const alias = asMatch[2] || asMatch[3] || asMatch[4];
          let original = expression;
          if (/^[a-zA-Z0-9_.-]+$/.test(expression)) {
            original = expression;
          } else {
            const fieldMatch = expression.match(/\(\s*".*?"\s*\+\s*([a-zA-Z0-9_.-]+)\s*\+\s*".*?"\s*\)/);
            if (fieldMatch && fieldMatch[1]) {
              original = fieldMatch[1];
              Logger.debug(`Extracted field name from complex expression: ${original}`);
            }
          }
          aliases.push({
            original,
            alias,
            expression
          });
          Logger.debug(`Found column alias: ${original} as "${alias}"`);
        }
      }
    } catch (error) {
      Logger.error("Error extracting column aliases:", error);
    }
    return aliases;
  }
  /**
   * Split a comma-separated list of columns while preserving expressions
   * This handles nested parentheses and quotes
   * 
   * @param columnsText The text containing comma-separated columns
   * @returns Array of column expressions
   */
  splitColumnsPreservingExpressions(columnsText) {
    const columns = [];
    let currentColumn = "";
    let parenDepth = 0;
    let inDoubleQuote = false;
    let inSingleQuote = false;
    for (let i = 0; i < columnsText.length; i++) {
      const char = columnsText[i];
      if (char === '"' && !inSingleQuote) {
        inDoubleQuote = !inDoubleQuote;
      } else if (char === "'" && !inDoubleQuote) {
        inSingleQuote = !inSingleQuote;
      }
      if (!inDoubleQuote && !inSingleQuote) {
        if (char === "(") {
          parenDepth++;
        } else if (char === ")") {
          parenDepth--;
        }
      }
      if (char === "," && parenDepth === 0 && !inDoubleQuote && !inSingleQuote) {
        columns.push(currentColumn.trim());
        currentColumn = "";
        continue;
      }
      currentColumn += char;
    }
    if (currentColumn.trim()) {
      columns.push(currentColumn.trim());
    }
    return columns;
  }
  /**
   * Ensure the query has a type (TABLE, LIST, TASK, CALENDAR)
   * If no type is specified, add TABLE as the default
   * 
   * @param query The Dataview query
   * @returns The query with a type
   */
  ensureQueryType(query) {
    const hasType = /\b(TABLE|LIST|TASK|CALENDAR)\b/i.test(query);
    if (!hasType) {
      const lines = query.split("\n");
      let firstNonCommentLine = -1;
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line && !line.startsWith("//") && !line.startsWith("/*")) {
          firstNonCommentLine = i;
          break;
        }
      }
      if (firstNonCommentLine >= 0) {
        const settings = this.parseSettings(lines.slice(firstNonCommentLine + 1).join("\n"));
        let propertiesToInclude = "";
        const propertiesToIncludeArray = [];
        if (settings.imageProperty) {
          propertiesToIncludeArray.push(settings.imageProperty);
        }
        propertiesToInclude = "";
        Logger.debug("Using simple TABLE query without property list");
        if (propertiesToInclude.trim() === "") {
          lines[firstNonCommentLine] = "TABLE " + lines[firstNonCommentLine];
        } else {
          lines[firstNonCommentLine] = "TABLE" + propertiesToInclude + " " + lines[firstNonCommentLine];
        }
        return lines.join("\n");
      } else {
        return "TABLE " + query;
      }
    }
    return query;
  }
  /**
   * Parse the settings section of a datacards code block
   * 
   * @param settingsText The settings text to parse
   * @returns The parsed settings object
   */
  parseSettings(settingsText) {
    if (!settingsText) {
      return {};
    }
    const settings = {};
    const lines = settingsText.split("\n");
    Logger.debug("Parsing settings from text");
    for (const line of lines) {
      if (line.trim().startsWith("//") || line.trim().startsWith("/*") || !line.trim()) {
        continue;
      }
      const match = line.match(/^\s*([a-zA-Z0-9_]+)\s*:\s*(.+)\s*$/);
      if (match) {
        const [, key, value] = match;
        Logger.debug(`Found setting: ${key} = ${value}`);
        if (key === "properties" && value.trim().startsWith("[") && value.trim().endsWith("]")) {
          Logger.debug("Detected properties array");
          const arrayContent = value.substring(1, value.length - 1).trim();
          if (arrayContent) {
            const properties = arrayContent.split(",").map((item) => item.trim());
            settings[key] = properties;
          } else {
            settings[key] = [];
          }
        } else {
          if (key === "defaultDateFormat") {
            settings[key] = value.trim();
          } else if (key === "dynamicUpdate") {
            settings[key] = this.parseValue(value.trim());
            Logger.debug(`Parsed dynamicUpdate setting: ${settings[key]}`);
          } else {
            settings[key] = this.parseValue(value.trim());
          }
        }
      }
    }
    return settings;
  }
  /**
   * Parse a value from the settings section
   * 
   * @param value The value to parse
   * @returns The parsed value
   */
  parseValue(value) {
    Logger.debug("Parsing value:", value);
    try {
      const jsonValue = JSON.parse(value);
      return jsonValue;
    } catch (e) {
    }
    if (value.startsWith("[") && value.endsWith("]")) {
      Logger.debug("Detected array syntax");
      const arrayContent = value.substring(1, value.length - 1).trim();
      if (arrayContent) {
        const items = arrayContent.split(",").map((item) => {
          const trimmedItem = item.trim();
          return trimmedItem;
        });
        return items;
      }
      return [];
    }
    if (/^-?\d+(\.\d+)?$/.test(value)) {
      return Number(value);
    }
    if (value.toLowerCase() === "true") return true;
    if (value.toLowerCase() === "false") return false;
    return value;
  }
};

// src/services/renderer.ts
var import_obsidian2 = require("obsidian");
var RendererService = class {
  constructor(app, pluginSettings) {
    // Store the current settings for use in formatting methods
    this.currentSettings = null;
    this.app = app;
    this.pluginSettings = pluginSettings;
  }
  /**
   * Update the plugin settings reference
   * 
   * @param settings The updated plugin settings
   */
  updateSettings(settings) {
    this.pluginSettings = settings;
  }
  /**
   * Check if the current device is mobile or if mobile mode is forced
   * 
   * @returns True if the device is mobile or if mobile mode is forced, false otherwise
   */
  isMobileDevice() {
    return import_obsidian2.Platform.isMobile || this.pluginSettings.forceMobileMode;
  }
  /**
   * Render Dataview query results as cards
   * 
   * @param container The container element to render into
   * @param results The Dataview query results
   * @param blockSettings The settings for this specific block
   */
  renderCards(container, results, blockSettings) {
    const isMobile = this.isMobileDevice();
    Logger.debug("Is mobile device:", isMobile);
    let settings = { ...this.pluginSettings };
    Logger.debug("Initial settings from plugin:", {
      preset: settings.preset,
      imageHeight: settings.imageHeight,
      mobileColumns: settings.mobileColumns,
      mobilePreset: settings.mobilePreset,
      mobileImageHeight: settings.mobileImageHeight
    });
    settings = { ...settings, ...blockSettings };
    Logger.debug("After applying block settings:", {
      preset: settings.preset,
      imageHeight: settings.imageHeight,
      mobileColumns: settings.mobileColumns,
      mobilePreset: settings.mobilePreset,
      mobileImageHeight: settings.mobileImageHeight
    });
    if (isMobile) {
      Logger.debug("Applying mobile settings...");
      Logger.debug(`Using mobile columns: ${settings.mobileColumns}`);
      if (settings.mobilePreset !== void 0) {
        Logger.debug(`Overriding preset: ${settings.preset} with mobilePreset: ${settings.mobilePreset}`);
        settings.preset = settings.mobilePreset;
      }
      if (settings.mobileImageHeight !== void 0) {
        Logger.debug(`Overriding imageHeight: ${settings.imageHeight} with mobileImageHeight: ${settings.mobileImageHeight}`);
        settings.imageHeight = settings.mobileImageHeight;
      }
      Logger.debug("Final settings after applying mobile settings:", {
        preset: settings.preset,
        imageHeight: settings.imageHeight
      });
    }
    this.currentSettings = settings;
    const cardsContainer = container.createEl("div", {
      cls: "datacards-container"
    });
    cardsContainer.addClass(`datacards-preset-${settings.preset}`);
    if (!settings.enableShadows) {
      cardsContainer.addClass("datacards-no-shadows");
    }
    if (settings.fontSize && settings.fontSize !== "default") {
      cardsContainer.addClass(`datacards-font-${settings.fontSize}`);
      Logger.debug(`Applied font size class: datacards-font-${settings.fontSize}`);
    } else if (settings.preset === "dense" && (!settings.fontSize || settings.fontSize === "default")) {
      cardsContainer.addClass("datacards-font-small");
      Logger.debug("Applied small font size for dense preset");
    }
    cardsContainer.style.setProperty("--card-gap", `${settings.cardSpacing}px`);
    let columnsToUse;
    if (isMobile) {
      columnsToUse = settings.mobileColumns;
    } else {
      let recommendedColumns = 3;
      if (settings.preset === "dense") {
        recommendedColumns = 6;
      } else if (settings.preset === "compact") {
        recommendedColumns = 4;
      } else if (settings.preset === "square") {
        recommendedColumns = 4;
      } else if (settings.preset === "portrait") {
        recommendedColumns = 3;
      }
      columnsToUse = blockSettings.columns !== void 0 ? blockSettings.columns : recommendedColumns;
    }
    Logger.debug(`Using ${columnsToUse} columns`);
    cardsContainer.style.setProperty("--card-columns", columnsToUse.toString(), "important");
    let imageHeight;
    if (blockSettings.imageHeight !== void 0) {
      imageHeight = settings.imageHeight;
    } else {
      if (settings.preset === "portrait") {
        imageHeight = "350px";
      } else if (settings.preset === "square") {
        imageHeight = "200px";
      } else if (settings.preset === "compact") {
        imageHeight = "200px";
      } else if (settings.preset === "dense") {
        imageHeight = "120px";
      } else {
        imageHeight = "200px";
      }
    }
    if (typeof imageHeight === "number" || /^\d+$/.test(imageHeight)) {
      imageHeight = `${imageHeight}px`;
    }
    cardsContainer.style.setProperty("--image-height", imageHeight);
    if (blockSettings.imageFit !== void 0) {
      cardsContainer.style.setProperty("--image-fit", settings.imageFit);
    } else {
      const defaultFit = settings.preset === "portrait" ? "contain" : "cover";
      cardsContainer.style.setProperty("--image-fit", defaultFit);
    }
    if (results && results.values && Array.isArray(results.values)) {
      Logger.debug("Detected table-like results with values array");
      this.renderTableResults(cardsContainer, results, settings);
    } else if (results && Array.isArray(results)) {
      Logger.debug("Detected array results");
      this.renderArrayResults(cardsContainer, results, settings);
    } else if (results && typeof results === "object") {
      Logger.debug("Detected object results");
      this.renderObjectResults(cardsContainer, results, settings);
    } else {
      Logger.debug("No valid results detected");
      this.renderError(cardsContainer, "No results or unsupported result type");
    }
  }
  /**
   * Render an error message
   * 
   * @param container The container element
   * @param message The error message
   */
  renderError(container, message) {
    const errorEl = container.createEl("div", {
      cls: "datacards-error",
      text: message
    });
  }
  /**
   * Render table-like Dataview results
   * 
   * @param container The container element
   * @param results The Dataview table results
   * @param settings The merged settings
   */
  renderTableResults(container, results, settings) {
    const { values, headers } = results;
    Logger.debug("Rendering table results:");
    Logger.debug("- Headers:", headers);
    Logger.debug("- Number of rows:", values.length);
    values.forEach((row, rowIndex) => {
      Logger.debug(`Processing row ${rowIndex}`);
      const card = this.createCardElement(container);
      if (settings.imageProperty && headers.includes(settings.imageProperty)) {
        const imageIndex = headers.indexOf(settings.imageProperty);
        const imageValue = row[imageIndex];
        Logger.debug(`Image property '${settings.imageProperty}' value:`, imageValue);
        if (imageValue) {
          this.addImageToCard(card, imageValue);
        }
      } else if (settings.imageProperty) {
        Logger.debug(`Image property '${settings.imageProperty}' not found in headers:`, headers);
      }
      const contentEl = card.createEl("div", { cls: "datacards-content" });
      if (headers.includes("File") || headers.includes("file")) {
        const fileIndex = headers.findIndex((h) => h.toLowerCase() === "file");
        if (fileIndex >= 0) {
          const fileValue = row[fileIndex];
          Logger.debug("File property value:", fileValue);
          const filePropertyEl = contentEl.createEl("div", {
            cls: "datacards-property datacards-file-property-container"
          });
          this.formatFileProperty(filePropertyEl, fileValue);
        }
      }
      const propertiesContainer = contentEl.createEl("div", {
        cls: "datacards-properties-container"
      });
      const shouldScroll = this.shouldUseScrollableProperties(settings);
      if (shouldScroll) {
        propertiesContainer.addClass("datacards-scrollable-properties");
        const contentHeight = this.getContentHeight(settings);
        propertiesContainer.style.setProperty("--content-height", contentHeight);
      }
      let propertiesToShow = [];
      if (settings.properties === "all") {
        propertiesToShow = [...headers];
        Logger.debug("Using all headers as properties:", propertiesToShow);
      } else if (Array.isArray(settings.properties)) {
        propertiesToShow = [...settings.properties];
        Logger.debug("Using specified properties:", propertiesToShow);
      } else {
        Logger.debug("No properties specified, using empty array");
      }
      let filteredProperties = propertiesToShow.filter(
        (prop) => !settings.exclude.includes(prop) && prop !== settings.imageProperty && prop.toLowerCase() !== "file"
        // Exclude file property here, we already added it separately
      );
      Logger.debug("Filtered properties (after excluding file):", filteredProperties);
      filteredProperties.forEach((property) => {
        Logger.debug(`Checking property '${property}' in headers:`, headers.includes(property));
        if (headers.includes(property)) {
          const propIndex = headers.indexOf(property);
          const propValue = row[propIndex];
          console.log(`Property '${property}' value:`, propValue);
          console.log(`Property '${property}' type:`, typeof propValue);
          if (typeof propValue === "string" && propValue.includes("[[") && propValue.includes("]]")) {
            console.log(`Found wiki link in property '${property}':`, propValue);
            const propertyEl = propertiesContainer.createEl("div", {
              cls: "datacards-property"
            });
            if (settings.showLabels) {
              propertyEl.createEl("div", {
                cls: "datacards-property-label",
                text: property
              });
            }
            const valueEl = propertyEl.createEl("div", {
              cls: "datacards-property-value"
            });
            const wikiLinkMatch = propValue.match(/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/);
            if (wikiLinkMatch) {
              const path = wikiLinkMatch[1];
              const displayText = wikiLinkMatch[2] || this.getCleanFilename(path);
              console.log(`Creating direct link for wiki link: path="${path}", display="${displayText}"`);
              const link = valueEl.createEl("a", {
                cls: "internal-link",
                text: displayText,
                attr: {
                  href: path,
                  "data-href": path,
                  "data-type": "link"
                }
              });
              this.app.workspace.trigger("hover-link", {
                event: new MouseEvent("mouseover"),
                source: "preview",
                hoverEl: link,
                targetEl: link,
                linktext: path
              });
            } else {
              valueEl.setText(propValue);
            }
          } else {
            this.addPropertyToCard(propertiesContainer, property, propValue, settings);
          }
        } else {
          Logger.debug(`Property '${property}' not found in headers`);
        }
      });
      if (filteredProperties.length === 0 && !headers.some((h) => h.toLowerCase() === "file")) {
        Logger.debug("No properties were added to the card");
        contentEl.createEl("div", {
          cls: "datacards-property",
          text: "No properties to display"
        });
      }
    });
  }
  /**
   * Render array Dataview results
   * 
   * @param container The container element
   * @param results The Dataview array results
   * @param settings The merged settings
   */
  renderArrayResults(container, results, settings) {
    results.forEach((item) => {
      const card = this.createCardElement(container);
      if (settings.imageProperty && item[settings.imageProperty]) {
        this.addImageToCard(card, item[settings.imageProperty]);
      }
      const contentEl = card.createEl("div", { cls: "datacards-content" });
      if ("file" in item) {
        const filePropertyEl = contentEl.createEl("div", {
          cls: "datacards-property datacards-file-property-container"
        });
        this.formatFileProperty(filePropertyEl, item["file"]);
      }
      const propertiesContainer = contentEl.createEl("div", {
        cls: "datacards-properties-container"
      });
      const shouldScroll = this.shouldUseScrollableProperties(settings);
      if (shouldScroll) {
        propertiesContainer.addClass("datacards-scrollable-properties");
        const contentHeight = this.getContentHeight(settings);
        propertiesContainer.style.setProperty("--content-height", contentHeight);
      }
      const allProperties = Object.keys(item);
      const propertiesToShow = settings.properties === "all" ? allProperties : Array.isArray(settings.properties) ? settings.properties : [];
      const filteredProperties = propertiesToShow.filter(
        (prop) => !settings.exclude.includes(prop) && prop !== settings.imageProperty && prop.toLowerCase() !== "file"
      );
      filteredProperties.forEach((property) => {
        if (property in item) {
          this.addPropertyToCard(propertiesContainer, property, item[property], settings);
        }
      });
    });
  }
  /**
   * Render object Dataview results
   * 
   * @param container The container element
   * @param results The Dataview object results
   * @param settings The merged settings
   */
  renderObjectResults(container, results, settings) {
    const card = this.createCardElement(container);
    if (settings.imageProperty && results[settings.imageProperty]) {
      this.addImageToCard(card, results[settings.imageProperty]);
    }
    const contentEl = card.createEl("div", { cls: "datacards-content" });
    if ("file" in results) {
      const filePropertyEl = contentEl.createEl("div", {
        cls: "datacards-property datacards-file-property-container"
      });
      this.formatFileProperty(filePropertyEl, results["file"]);
    }
    const propertiesContainer = contentEl.createEl("div", {
      cls: "datacards-properties-container"
    });
    const shouldScroll = this.shouldUseScrollableProperties(settings);
    if (shouldScroll) {
      propertiesContainer.addClass("datacards-scrollable-properties");
      const contentHeight = this.getContentHeight(settings);
      propertiesContainer.style.setProperty("--content-height", contentHeight);
    }
    const allProperties = Object.keys(results);
    const propertiesToShow = settings.properties === "all" ? allProperties : Array.isArray(settings.properties) ? settings.properties : [];
    const filteredProperties = propertiesToShow.filter(
      (prop) => !settings.exclude.includes(prop) && prop !== settings.imageProperty && prop.toLowerCase() !== "file"
    );
    filteredProperties.forEach((property) => {
      if (property in results) {
        this.addPropertyToCard(propertiesContainer, property, results[property], settings);
      }
    });
  }
  /**
   * Create a card element
   * 
   * @param container The container to add the card to
   * @returns The created card element
   */
  createCardElement(container) {
    return container.createEl("div", {
      cls: "datacards-card"
    });
  }
  /**
   * Add an image to a card
   * 
   * @param card The card element
   * @param imageValue The image value (path, URL, or Link object)
   */
  addImageToCard(card, imageValue) {
    var _a;
    const imageContainer = card.createEl("div", {
      cls: "datacards-image-container"
    });
    let imagePath;
    if (typeof imageValue === "object" && imageValue !== null) {
      Logger.debug("Image value is an object:", imageValue);
      if ("path" in imageValue) {
        imagePath = imageValue.path;
        Logger.debug("Extracted path from Link object:", imagePath);
      } else {
        imagePath = String(imageValue);
        Logger.debug("Converted object to string:", imagePath);
      }
    } else {
      imagePath = String(imageValue);
      Logger.debug("Image value is a string:", imagePath);
    }
    imagePath = this.extractImageSource(imagePath);
    Logger.debug("After image source extraction:", imagePath);
    const placeholder = imageContainer.createEl("div", {
      cls: "datacards-image-placeholder",
      text: "Loading image..."
    });
    if ((_a = this.currentSettings) == null ? void 0 : _a.enableLazyLoading) {
      this.lazyLoadImage(imageContainer, placeholder, imagePath);
    } else {
      this.loadImage(imageContainer, placeholder, imagePath);
    }
  }
  /**
   * Extract an image source from a string if present
   * This helps with handling expressions that result in wiki links or URLs
   * 
   * @param value The string value that might contain a wiki link or URL
   * @returns The wiki link or URL if found, otherwise the original string
   */
  extractImageSource(value) {
    if (!value || typeof value !== "string") {
      return String(value || "");
    }
    const markdownImageMatch = value.match(/!\[(.*?)\]\((.*?)\)/);
    if (markdownImageMatch) {
      const url = markdownImageMatch[2];
      Logger.debug("Extracted URL from markdown image syntax:", url);
      const cleanUrl = url.replace(/['",.;:]+$/, "");
      return cleanUrl;
    }
    const wikiLinkMatch = value.match(/\[\[(.*?)\]\]/);
    if (wikiLinkMatch) {
      const wikiLink = `[[${wikiLinkMatch[1]}]]`;
      Logger.debug("Extracted wiki link:", wikiLink);
      return wikiLink;
    }
    const urlMatch = value.match(/(https?:\/\/[^\s"'<>[\]{}]+)/);
    if (urlMatch) {
      const url = urlMatch[1];
      Logger.debug("Extracted URL:", url);
      const cleanUrl = url.replace(/['",.;:]+$/, "");
      return cleanUrl;
    }
    return value;
  }
  /**
   * Lazy load an image using Intersection Observer
   * 
   * @param imageContainer The container element for the image
   * @param placeholder The placeholder element
   * @param imagePath The path to the image
   */
  lazyLoadImage(imageContainer, placeholder, imagePath) {
    Logger.debug("Lazy loading image:", imagePath);
    const observer = new IntersectionObserver((entries, observer2) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          Logger.debug("Image container is now visible, loading image:", imagePath);
          this.loadImage(imageContainer, placeholder, imagePath);
          observer2.disconnect();
        }
      });
    }, {
      rootMargin: "100px",
      // Start loading when image is 100px from viewport
      threshold: 0.1
      // Trigger when at least 10% of the element is visible
    });
    observer.observe(imageContainer);
  }
  /**
   * Load an image immediately
   * 
   * @param imageContainer The container element for the image
   * @param placeholder The placeholder element
   * @param imagePath The path to the image
   */
  loadImage(imageContainer, placeholder, imagePath) {
    const markdownImageMatch = imagePath.match(/!\[(.*?)\]\((.*?)\)/);
    if (markdownImageMatch) {
      const imageUrl = markdownImageMatch[2];
      Logger.debug("Extracted URL from markdown image syntax:", imageUrl);
      this.loadImage(imageContainer, placeholder, imageUrl);
      return;
    }
    if (imagePath.startsWith("http") || imagePath.startsWith("https")) {
      Logger.debug("Handling as external URL:", imagePath);
      const cleanUrl = imagePath.replace(/['",.;:]+$/, "");
      Logger.debug("Cleaned URL:", cleanUrl);
      this.loadExternalImage(imageContainer, placeholder, cleanUrl);
    } else if (imagePath.startsWith("[[") && imagePath.endsWith("]]")) {
      Logger.debug("Handling as wiki link");
      const linkText = imagePath.substring(2, imagePath.length - 2);
      let path = linkText;
      if (linkText.includes("|")) {
        const parts = linkText.split("|");
        path = parts[0];
      }
      try {
        const abstractFile = this.app.vault.getAbstractFileByPath(path);
        if (abstractFile && "stat" in abstractFile) {
          Logger.debug("Found file in vault:", abstractFile);
          const file = abstractFile;
          const resourcePath = this.app.vault.getResourcePath(file);
          Logger.debug("Resource path:", resourcePath);
          const img = imageContainer.createEl("img", {
            cls: "datacards-image",
            attr: { src: resourcePath }
          });
          img.onload = () => {
            placeholder.remove();
            img.addClass("loaded");
          };
          img.onerror = () => {
            placeholder.setText("Image not found");
          };
        } else {
          Logger.debug("File not found in vault or not a file:", path);
          placeholder.setText("Image not found");
        }
      } catch (error) {
        Logger.error("Error loading image:", error);
        placeholder.setText("Error loading image");
      }
    } else {
      Logger.debug("Handling as local path");
      try {
        const abstractFile = this.app.vault.getAbstractFileByPath(imagePath);
        if (abstractFile && "stat" in abstractFile) {
          Logger.debug("Found file in vault:", abstractFile);
          const file = abstractFile;
          const resourcePath = this.app.vault.getResourcePath(file);
          Logger.debug("Resource path:", resourcePath);
          const img = imageContainer.createEl("img", {
            cls: "datacards-image",
            attr: { src: resourcePath }
          });
          img.onload = () => {
            placeholder.remove();
            img.addClass("loaded");
          };
          img.onerror = () => {
            placeholder.setText("Image not found");
          };
        } else {
          Logger.debug("File not found in vault:", imagePath);
          placeholder.setText("Image not found");
        }
      } catch (error) {
        Logger.error("Error loading image:", error);
        placeholder.setText("Error loading image");
      }
    }
  }
  /**
   * Load an external image with multiple fallback approaches
   * 
   * @param imageContainer The container element for the image
   * @param placeholder The placeholder element
   * @param url The URL of the image
   */
  loadExternalImage(imageContainer, placeholder, url) {
    Logger.debug("Loading external image with URL:", url);
    const img = imageContainer.createEl("img", {
      cls: "datacards-image",
      attr: {
        src: url,
        // Add crossorigin attribute to help with CORS issues
        crossorigin: "anonymous"
      }
    });
    img.onload = () => {
      Logger.debug("External image loaded successfully:", url);
      placeholder.remove();
      img.addClass("loaded");
    };
    img.onerror = (error) => {
      Logger.error("Failed to load external image with crossorigin attribute:", url, error);
      Logger.debug("Trying again without crossorigin attribute");
      img.removeAttribute("crossorigin");
      img.onload = () => {
        Logger.debug("External image loaded successfully without crossorigin:", url);
        placeholder.remove();
        img.addClass("loaded");
      };
      img.onerror = (secondError) => {
        Logger.error("Failed to load external image without crossorigin:", url, secondError);
        const proxyUrl = `https://images.weserv.nl/?url=${encodeURIComponent(url)}`;
        Logger.debug("Trying with image proxy service:", proxyUrl);
        img.src = proxyUrl;
        img.onload = () => {
          Logger.debug("External image loaded successfully via proxy:", proxyUrl);
          placeholder.remove();
          img.addClass("loaded");
        };
        img.onerror = (thirdError) => {
          Logger.error("All attempts to load image failed:", url, thirdError);
          placeholder.setText("Image not found - URL: " + url);
          try {
            const testImg = document.createElement("img");
            testImg.style.display = "none";
            testImg.src = url;
            document.body.appendChild(testImg);
            setTimeout(() => {
              if (document.body.contains(testImg)) {
                document.body.removeChild(testImg);
              }
            }, 3e3);
          } catch (e) {
            Logger.error("Error during final test:", e);
          }
        };
      };
    };
  }
  /**
   * Add a property to a card
   * 
   * @param contentEl The content element to add the property to
   * @param propertyName The name of the property
   * @param propertyValue The value of the property
   * @param settings The settings
   */
  addPropertyToCard(contentEl, propertyName, propertyValue, settings) {
    Logger.debug(`Adding property to card: ${propertyName} = ${propertyValue}`);
    Logger.debug(`Property type: ${typeof propertyValue}`);
    const propertyEl = contentEl.createEl("div", {
      cls: "datacards-property"
    });
    if (settings.propertiesAlign) {
      propertyEl.addClass(`datacards-text-${settings.propertiesAlign}`);
    }
    let displayName = propertyName;
    if (settings.columnAliases) {
      const aliasEntry = settings.columnAliases.find((a) => a.original === propertyName);
      if (aliasEntry) {
        displayName = aliasEntry.alias;
        Logger.debug(`Using alias "${displayName}" for property "${propertyName}"`);
      }
    }
    if (settings.showLabels) {
      const labelEl = propertyEl.createEl("div", {
        cls: "datacards-property-label",
        text: displayName
      });
      if (settings.propertiesAlign) {
        labelEl.addClass(`datacards-text-${settings.propertiesAlign}`);
      }
    }
    if (propertyName.toLowerCase() === "file") {
      this.formatFileProperty(propertyEl, propertyValue);
    } else {
      const formatter = settings.propertyFormatters[propertyName];
      if (formatter) {
        this.formatPropertyWithCustomFormatter(propertyEl, propertyValue, formatter);
      } else {
        this.formatPropertyByType(propertyEl, propertyValue);
      }
    }
  }
  /**
   * Format a property value using a custom formatter
   * 
   * @param propertyEl The property element
   * @param value The property value
   * @param formatter The formatter configuration
   */
  formatPropertyWithCustomFormatter(propertyEl, value, formatter) {
    const valueEl = propertyEl.createEl("div", {
      cls: "datacards-property-value"
    });
    switch (formatter.type) {
      case "stars":
        this.formatAsStars(valueEl, value, formatter.options);
        break;
      case "badge":
        this.formatAsBadge(valueEl, value, formatter.options);
        break;
      case "progress":
        this.formatAsProgress(valueEl, value, formatter.options);
        break;
      case "date":
        this.formatAsDate(valueEl, value, formatter.options);
        break;
      case "tags":
        this.formatAsTags(valueEl, value, formatter.options);
        break;
      default:
        valueEl.setText(String(value));
    }
  }
  /**
   * Format a property value based on its type
   * 
   * @param propertyEl The property element
   * @param value The property value
   */
  formatPropertyByType(propertyEl, value) {
    Logger.debug("formatPropertyByType called with value:", value);
    Logger.debug("Value type:", typeof value);
    if (typeof value === "string") {
      Logger.debug("String value length:", value.length);
      Logger.debug("String value exact content:", JSON.stringify(value));
    }
    const valueEl = propertyEl.createEl("div", {
      cls: "datacards-property-value"
    });
    if (propertyEl.hasClass("datacards-text-left")) {
      valueEl.addClass("datacards-text-left");
    } else if (propertyEl.hasClass("datacards-text-center")) {
      valueEl.addClass("datacards-text-center");
    } else if (propertyEl.hasClass("datacards-text-right")) {
      valueEl.addClass("datacards-text-right");
    }
    if (value === null || value === void 0) {
      valueEl.setText("");
    } else if (Array.isArray(value)) {
      valueEl.setText(value.join(", "));
    } else if (typeof value === "boolean") {
      const checkbox = valueEl.createEl("input", {
        attr: {
          type: "checkbox",
          checked: value ? "checked" : "",
          disabled: "disabled"
        }
      });
    } else if (typeof value === "number") {
      valueEl.setText(value.toString());
    } else if (value instanceof Date) {
      this.formatAsDate(valueEl, value);
    } else if (typeof value === "string") {
      const isIsoDate = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{2}:\d{2}$/.test(value) || /^\d{4}-\d{2}-\d{2}$/.test(value);
      if (isIsoDate) {
        const date = new Date(value);
        if (!isNaN(date.getTime())) {
          this.formatAsDate(valueEl, date);
          return;
        }
      }
      const extractedValue = this.extractImageSource(value);
      if (extractedValue !== value) {
        this.formatPropertyByType(propertyEl, extractedValue);
        return;
      }
      if (typeof value === "string" && value.includes("[[") && value.includes("|") && value.includes("]]")) {
        const match = value.match(/\[\[.*\|(.*?)\]\]/);
        if (match && match[1]) {
          valueEl.setText(match[1]);
          return;
        }
      }
      if (value.includes("[[") && value.includes("]]")) {
        console.log("DATACARDS DEBUG: Found wiki link in property value:", value);
        Logger.debug("Found wiki link in property value:", value);
        const wikiLinkRegex = /\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/;
        const wikiLinkMatch = value.match(wikiLinkRegex);
        if (wikiLinkMatch) {
          console.log("DATACARDS DEBUG: Wiki link match:", wikiLinkMatch);
          Logger.debug("Wiki link match:", wikiLinkMatch);
          const path = wikiLinkMatch[1];
          const displayText = wikiLinkMatch[2] || this.getCleanFilename(path);
          console.log(`DATACARDS DEBUG: Wiki link path: "${path}", display text: "${displayText}"`);
          Logger.debug(`Wiki link path: "${path}", display text: "${displayText}"`);
          console.log("DATACARDS DEBUG: Creating link element for wiki link");
          const link = valueEl.createEl("a", {
            cls: "internal-link datacards-file-link",
            text: displayText,
            attr: {
              href: path,
              "data-href": path,
              "data-type": "link"
            }
          });
          console.log("DATACARDS DEBUG: Link element created:", link);
          this.app.workspace.trigger("hover-link", {
            event: new MouseEvent("mouseover"),
            source: "preview",
            hoverEl: link,
            targetEl: link,
            linktext: path
          });
          return;
        }
      }
      const markdownImageMatch = value.match(/!\[(.*?)\]\((.*?)\)/);
      if (markdownImageMatch) {
        Logger.debug("Found markdown image in property value");
        const imageUrl = markdownImageMatch[2];
        const altText = markdownImageMatch[1];
        valueEl.addClass("loading");
        const img = valueEl.createEl("img", {
          cls: "datacards-property-image loading",
          attr: {
            src: imageUrl,
            alt: altText || "Image",
            crossorigin: "anonymous"
            // Add crossorigin attribute to help with CORS issues
          }
        });
        img.onload = () => {
          Logger.debug("Property image loaded successfully:", imageUrl);
          img.removeClass("loading");
        };
        img.onerror = () => {
          Logger.error("Failed to load property image:", imageUrl);
          img.remove();
          valueEl.removeClass("loading");
          valueEl.addClass("image-error");
          valueEl.setText("Image not found: " + imageUrl);
        };
        return;
      }
      if (value.startsWith("[[") && value.endsWith("]]")) {
        console.log("DATACARDS DEBUG: Processing wiki link that starts and ends with [[]]:", value);
        Logger.debug("Processing wiki link that starts and ends with [[]]:", value);
        const wikiLinkRegex = /\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/;
        const wikiLinkMatch = value.match(wikiLinkRegex);
        if (wikiLinkMatch) {
          const path = wikiLinkMatch[1];
          const displayText = wikiLinkMatch[2] || this.getCleanFilename(path);
          console.log(`DATACARDS DEBUG: Wiki link path: "${path}", display text: "${displayText}"`);
          Logger.debug(`Wiki link path: "${path}", display text: "${displayText}"`);
          console.log("DATACARDS DEBUG: Creating link element for wiki link (direct match)");
          const link = valueEl.createEl("a", {
            cls: "internal-link datacards-file-link",
            text: displayText,
            attr: {
              href: path,
              "data-href": path,
              "data-type": "link"
            }
          });
          console.log("DATACARDS DEBUG: Link element created (direct match):", link);
          this.app.workspace.trigger("hover-link", {
            event: new MouseEvent("mouseover"),
            source: "preview",
            hoverEl: link,
            targetEl: link,
            linktext: path
          });
        } else {
          const linkText = value.substring(2, value.length - 2);
          let displayText = linkText;
          let path = linkText;
          if (linkText.includes("|")) {
            const parts = linkText.split("|");
            path = parts[0];
            displayText = parts[1];
          } else {
            displayText = this.getCleanFilename(path);
          }
          Logger.debug(`Fallback wiki link path: "${path}", display text: "${displayText}"`);
          const link = valueEl.createEl("a", {
            cls: "internal-link datacards-file-link",
            text: displayText,
            attr: {
              href: path,
              "data-href": path,
              "data-type": "link"
            }
          });
          this.app.workspace.trigger("hover-link", {
            event: new MouseEvent("mouseover"),
            source: "preview",
            hoverEl: link,
            targetEl: link,
            linktext: path
          });
        }
      } else if (value.startsWith("#")) {
        const tag = valueEl.createEl("a", {
          cls: "datacards-tag tag-link",
          text: value,
          attr: {
            href: value,
            "data-href": value,
            "data-type": "tag"
          }
        });
      } else if (/<[ubia]>|<\/[ubia]>|<span|<div|<p>|<\/p>|<br>|<hr>/.test(value)) {
        console.log("DATACARDS DEBUG: Rendering HTML content:", value);
        valueEl.innerHTML = value;
      } else {
        valueEl.setText(value);
      }
    } else if (typeof value === "object" && value !== null) {
      if ("path" in value && "type" in value && value.type === "file") {
        console.log("Handling Dataview Link object:", value);
        const path = value.path;
        const displayText = value.display || this.getCleanFilename(path);
        console.log(`Creating link from Dataview Link object: path="${path}", display="${displayText}"`);
        const link = valueEl.createEl("a", {
          cls: "internal-link",
          text: displayText,
          attr: {
            href: path,
            "data-href": path,
            "data-type": "link"
          }
        });
        this.app.workspace.trigger("hover-link", {
          event: new MouseEvent("mouseover"),
          source: "preview",
          hoverEl: link,
          targetEl: link,
          linktext: path
        });
        return;
      }
      if ("ts" in value && typeof value.ts === "number") {
        const date = new Date(value.ts);
        if (!isNaN(date.getTime())) {
          this.formatAsDate(valueEl, date);
          return;
        }
      }
      valueEl.setText(String(value));
    } else {
      valueEl.setText(String(value));
    }
  }
  /**
   * Format a value as stars (for ratings)
   * 
   * @param container The container element
   * @param value The value to format
   * @param options Formatting options
   */
  formatAsStars(container, value, options) {
    const maxStars = (options == null ? void 0 : options.max) || 5;
    const starFull = "\u2605";
    const starEmpty = "\u2606";
    const starsContainer = container.createEl("div", {
      cls: "datacards-stars"
    });
    const numStars = Math.min(Math.max(0, value), maxStars);
    for (let i = 0; i < numStars; i++) {
      starsContainer.createEl("span", {
        cls: "datacards-star datacards-star-full",
        text: starFull
      });
    }
    for (let i = numStars; i < maxStars; i++) {
      starsContainer.createEl("span", {
        cls: "datacards-star datacards-star-empty",
        text: starEmpty
      });
    }
  }
  /**
   * Format a value as a badge
   * 
   * @param container The container element
   * @param value The value to format
   * @param options Formatting options
   */
  formatAsBadge(container, value, options) {
    const badge = container.createEl("span", {
      cls: "datacards-badge",
      text: value
    });
    if (options == null ? void 0 : options.color) {
      badge.style.backgroundColor = options.color;
    }
  }
  /**
   * Format a value as a progress bar
   * 
   * @param container The container element
   * @param value The value to format
   * @param options Formatting options
   */
  formatAsProgress(container, value, options) {
    const max = (options == null ? void 0 : options.max) || 100;
    const percentage = Math.min(Math.max(0, value), max) / max * 100;
    const progressContainer = container.createEl("div", {
      cls: "datacards-progress-container"
    });
    const progressBar = progressContainer.createEl("div", {
      cls: "datacards-progress-bar"
    });
    progressBar.style.width = `${percentage}%`;
    if (options == null ? void 0 : options.showText) {
      progressContainer.createEl("span", {
        cls: "datacards-progress-text",
        text: `${Math.round(percentage)}%`
      });
    }
  }
  /**
   * Format a value as a date
   * 
   * @param container The container element
   * @param value The value to format
   * @param options Formatting options
   */
  formatAsDate(container, value, options) {
    const date = typeof value === "string" ? new Date(value) : value;
    if (isNaN(date.getTime())) {
      container.setText(String(value));
      return;
    }
    const format = (options == null ? void 0 : options.format) || (this.currentSettings ? this.currentSettings.defaultDateFormat : DEFAULT_SETTINGS.defaultDateFormat);
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const day = date.getDate().toString().padStart(2, "0");
    let formattedDate = format.replace("YYYY", year.toString()).replace("MM", month).replace("DD", day);
    container.setText(formattedDate);
  }
  /**
   * Format a file property as a clickable link
   * Special handling for the file property which is always a link to the note
   * 
   * @param propertyEl The property element
   * @param value The file property value
   */
  formatFileProperty(propertyEl, value) {
    var _a;
    const valueEl = propertyEl.createEl("div", {
      cls: "datacards-property-value datacards-file-property"
    });
    if ((_a = this.currentSettings) == null ? void 0 : _a.titleAlign) {
      valueEl.addClass(`datacards-text-${this.currentSettings.titleAlign}`);
    } else {
      if (propertyEl.hasClass("datacards-text-left")) {
        valueEl.addClass("datacards-text-left");
      } else if (propertyEl.hasClass("datacards-text-center")) {
        valueEl.addClass("datacards-text-center");
      } else if (propertyEl.hasClass("datacards-text-right")) {
        valueEl.addClass("datacards-text-right");
      }
    }
    if (value === null || value === void 0) {
      valueEl.setText("");
      return;
    }
    let stringValue;
    if (typeof value === "object" && value !== null) {
      if ("path" in value) {
        stringValue = value.path;
      } else if ("link" in value) {
        stringValue = value.link;
      } else {
        stringValue = String(value);
      }
    } else {
      stringValue = String(value);
    }
    stringValue = this.extractImageSource(stringValue);
    Logger.debug("File property after image source extraction:", stringValue);
    if (typeof value === "string" && value.includes("[[") && value.includes("|") && value.includes("]]")) {
      console.log("DATACARDS DEBUG: Found wiki link with pipe character:", value);
      const match = value.match(/\[\[.*\|(.*?)\]\]/);
      if (match && match[1]) {
        console.log("DATACARDS DEBUG: Extracted display text:", match[1]);
        const fullMatch = value.match(/\[\[(.*?)\|(.*?)\]\]/);
        if (fullMatch) {
          const path = fullMatch[1];
          const displayText = fullMatch[2];
          console.log(`DATACARDS DEBUG: Creating link from pipe syntax - path: "${path}", display: "${displayText}"`);
          const link = valueEl.createEl("a", {
            cls: "internal-link datacards-file-link",
            text: displayText,
            attr: {
              href: path,
              "data-href": path,
              "data-type": "link"
            }
          });
          console.log("DATACARDS DEBUG: Created link element for pipe syntax:", link);
          this.app.workspace.trigger("hover-link", {
            event: new MouseEvent("mouseover"),
            source: "preview",
            hoverEl: link,
            targetEl: link,
            linktext: path
          });
          return;
        } else {
          console.log("DATACARDS DEBUG: Fallback to text only for pipe syntax");
          valueEl.setText(match[1]);
          return;
        }
      }
    }
    if (stringValue.includes("[[") && stringValue.includes("]]")) {
      Logger.debug("Found wiki link in file property:", stringValue);
      const wikiLinkMatch = stringValue.match(/\[\[([^\]]+)\]\]/);
      if (wikiLinkMatch) {
        const linkText = wikiLinkMatch[1];
        let displayText = linkText;
        let path = linkText;
        if (linkText.includes("|")) {
          const parts = linkText.split("|");
          path = parts[0];
          displayText = parts[1];
        } else {
          displayText = this.getCleanFilename(path);
        }
        const link = valueEl.createEl("a", {
          cls: "internal-link datacards-file-link",
          text: displayText,
          attr: {
            href: path,
            "data-href": path,
            "data-type": "link"
          }
        });
        return;
      }
    } else if (stringValue.startsWith("[[") && stringValue.endsWith("]]")) {
      const linkText = stringValue.substring(2, stringValue.length - 2);
      let displayText = linkText;
      let path = linkText;
      if (linkText.includes("|")) {
        const parts = linkText.split("|");
        path = parts[0];
        displayText = parts[1];
      } else {
        displayText = this.getCleanFilename(path);
      }
      const link = valueEl.createEl("a", {
        cls: "internal-link datacards-file-link",
        text: displayText,
        attr: {
          href: path,
          "data-href": path,
          "data-type": "link"
        }
      });
    } else {
      const displayText = this.getCleanFilename(stringValue);
      const link = valueEl.createEl("a", {
        cls: "internal-link datacards-file-link",
        text: displayText,
        attr: {
          href: stringValue,
          "data-href": stringValue,
          "data-type": "link"
        }
      });
    }
  }
  /**
   * Extract just the filename without path and extension
   * 
   * @param path The file path
   * @returns The clean filename
   */
  getCleanFilename(path) {
    let filename = path;
    if (filename.includes("/")) {
      filename = filename.split("/").pop() || filename;
    }
    if (filename.endsWith(".md")) {
      filename = filename.substring(0, filename.length - 3);
    }
    return filename;
  }
  /**
   * Format a value as tags
   * 
   * @param container The container element
   * @param value The value to format
   * @param options Formatting options
   */
  formatAsTags(container, value, options) {
    const tagsContainer = container.createEl("div", {
      cls: "datacards-tags-container"
    });
    const tags = Array.isArray(value) ? value : [value];
    tags.forEach((tag) => {
      const tagText = tag.startsWith("#") ? tag : `#${tag}`;
      const tagEl = tagsContainer.createEl("a", {
        cls: "datacards-tag tag-link",
        text: tagText,
        attr: {
          href: tagText,
          "data-href": tagText,
          "data-type": "tag"
        }
      });
    });
  }
  /**
   * Determine if properties should be scrollable based on settings precedence
   * 
   * @param settings The merged settings
   * @returns True if properties should be scrollable, false otherwise
   */
  shouldUseScrollableProperties(settings) {
    let shouldScroll = false;
    if (settings.preset === "square" || settings.preset === "compact") {
      shouldScroll = true;
    }
    if (this.pluginSettings.scrollableProperties !== void 0) {
      shouldScroll = this.pluginSettings.scrollableProperties;
    }
    const isMobile = this.isMobileDevice();
    if (isMobile && this.pluginSettings.mobileScrollableProperties !== void 0) {
      shouldScroll = this.pluginSettings.mobileScrollableProperties;
    }
    if (settings.scrollableProperties !== void 0) {
      shouldScroll = settings.scrollableProperties;
    }
    return shouldScroll;
  }
  /**
   * Get the content height based on settings precedence
   * 
   * @param settings The merged settings
   * @returns The content height as a string (e.g., '200px')
   */
  getContentHeight(settings) {
    let contentHeight = "200px";
    if (this.pluginSettings.contentHeight) {
      contentHeight = this.pluginSettings.contentHeight;
    }
    const isMobile = this.isMobileDevice();
    if (isMobile && this.pluginSettings.mobileContentHeight) {
      contentHeight = this.pluginSettings.mobileContentHeight;
    }
    if (settings.contentHeight) {
      contentHeight = settings.contentHeight;
    }
    return contentHeight;
  }
};

// src/utils/dataview-api.ts
var DataviewApiUtil = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Check if Dataview plugin is installed and enabled
   */
  isDataviewEnabled() {
    return this.plugin.app.plugins.plugins.dataview !== void 0;
  }
  /**
   * Get the Dataview API
   * @returns The Dataview API or null if not available
   */
  getDataviewApi() {
    if (!this.isDataviewEnabled()) {
      return null;
    }
    return this.plugin.app.plugins.plugins.dataview.api;
  }
  /**
   * Execute a Dataview query
   * @param query The Dataview query string
   * @param sourcePath The source file path
   * @param container The container element for rendering
   * @returns The query result or null if Dataview is not available
   */
  async executeQuery(query, sourcePath, container) {
    const api = this.getDataviewApi();
    if (!api) {
      return null;
    }
    try {
      return await api.query(query, sourcePath, container);
    } catch (error) {
      Logger.error("Error executing Dataview query:", error);
      throw error;
    }
  }
  /**
   * Wait for Dataview to complete indexing
   * @returns A promise that resolves to true if Dataview is ready, false if timed out
   */
  async waitForDataviewReady() {
    const api = this.getDataviewApi();
    if (!api) return false;
    if (api.index && api.index.initialized) {
      Logger.debug("Dataview index is already initialized");
      return true;
    }
    Logger.debug("Waiting for Dataview index to be ready...");
    return new Promise((resolve) => {
      const app = this.plugin.app;
      const eventRef = app.metadataCache.on("dataview:index-ready", () => {
        Logger.debug("Dataview index is now ready");
        app.metadataCache.offref(eventRef);
        resolve(true);
      });
      setTimeout(() => {
        Logger.warn("Timed out waiting for Dataview index");
        app.metadataCache.offref(eventRef);
        resolve(false);
      }, 5e3);
    });
  }
  /**
   * Execute a Dataview query safely, returning an object indicating success or failure
   * @param query The Dataview query string
   * @param sourcePath The source file path
   * @param container The container element for rendering
   * @param retryCount Optional retry count for internal use
   * @returns An object with the query result or error
   */
  async executeSafeQuery(query, sourcePath, container, retryCount = 0) {
    const api = this.getDataviewApi();
    if (!api) {
      Logger.error("Dataview API not found. Make sure Dataview plugin is enabled.");
      return { successful: false, value: "Dataview plugin is not enabled" };
    }
    if (!query || query.trim() === "") {
      Logger.error("Empty Dataview query");
      return { successful: false, value: "Empty query" };
    }
    Logger.debug("Executing Dataview query:", query);
    Logger.debug("Source path:", sourcePath);
    try {
      if (typeof api.query === "function") {
        Logger.debug("Using api.query method");
        try {
          const result = await api.query(query, sourcePath, container);
          Logger.debug("Direct query result type:", typeof result);
          if (result === void 0 || result === null) {
            Logger.error("Direct query returned undefined or null");
            return { successful: false, value: "No results returned" };
          }
          if (result && typeof result === "object") {
            if ("values" in result && Array.isArray(result.values)) {
              Logger.debug("Result contains a values array with length:", result.values.length);
            }
            if ("headers" in result && Array.isArray(result.headers)) {
              Logger.debug("Result contains headers:", result.headers);
            }
          }
          if (result && typeof result === "object" && "values" in result && Array.isArray(result.values) && result.values.length === 0 && retryCount < 3) {
            Logger.debug(`Empty result, retrying (attempt ${retryCount + 1}/3)...`);
            return new Promise((resolve) => {
              setTimeout(async () => {
                const retryResult = await this.executeSafeQuery(query, sourcePath, container, retryCount + 1);
                resolve(retryResult);
              }, 500);
            });
          }
          return { successful: true, value: result };
        } catch (queryError) {
          Logger.error("Error in direct query:", queryError);
          return {
            successful: false,
            value: queryError ? queryError.message || String(queryError) : "Error in query execution"
          };
        }
      } else {
        Logger.error("Dataview API query method not found.");
        return { successful: false, value: "Incompatible Dataview API version" };
      }
    } catch (error) {
      Logger.error("Error executing Dataview query:", error);
      return {
        successful: false,
        value: error ? error.message || String(error) : "Unknown error"
      };
    }
  }
};

// src/main.ts
var DataCardsPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.isRefreshing = false;
    this.lastActiveElement = null;
    this.refreshDebounceTimeout = 2500;
    /**
     * Debounced refresh function to avoid multiple refreshes in quick succession
     * This helps prevent input field focus loss when typing quickly
     */
    this.debouncedRefresh = (0, import_obsidian3.debounce)((file) => {
      this.refreshAffectedDataCards(file);
    }, this.refreshDebounceTimeout);
  }
  // ms to wait before refreshing (1.5 seconds)
  async onload() {
    await this.loadSettings();
    Logger.setDebugMode(this.settings.debugMode);
    this.parserService = new ParserService();
    this.rendererService = new RendererService(this.app, this.settings);
    this.dataviewApiUtil = new DataviewApiUtil(this);
    this.registerMarkdownCodeBlockProcessor("datacards", this.processDataCardsBlock.bind(this));
    this.addSettingTab(new DataCardsSettingTab(this.app, this));
    this.addCommand({
      id: "refresh-datacards",
      name: "Refresh all DataCards",
      callback: () => {
        this.refreshAllDataCards(true);
      }
    });
    this.registerDataviewEvents();
    Logger.debug("DataCards plugin loaded");
  }
  /**
   * Register event listeners for Dataview events
   */
  registerDataviewEvents() {
    this.app.workspace.onLayoutReady(() => {
      if (!this.dataviewApiUtil.isDataviewEnabled()) {
        Logger.warn("Dataview plugin is not enabled, cannot register for metadata change events");
        return;
      }
      this.registerEvent(
        // @ts-ignore - Dataview adds custom events to metadataCache
        this.app.metadataCache.on("dataview:metadata-change", (type, file) => {
          this.handleMetadataChange(type, file);
        })
      );
      Logger.debug("Registered for Dataview metadata change events");
    });
  }
  /**
   * Handle Dataview metadata changes
   * 
   * @param type The type of change
   * @param file The file that changed
   */
  handleMetadataChange(type, file) {
    if (!this.settings.enableDynamicUpdates) {
      Logger.debug("Dynamic updates are disabled globally, ignoring metadata change");
      return;
    }
    Logger.debug(`Dataview metadata changed: ${type} for file ${file == null ? void 0 : file.path}`);
    this.debouncedRefresh(file);
  }
  /**
   * Refresh DataCards that might be affected by changes to a specific file
   * 
   * @param file The file that changed
   */
  refreshAffectedDataCards(file) {
    if (!file) return;
    this.lastActiveElement = document.activeElement;
    this.refreshAllDataCards(false);
  }
  onunload() {
    Logger.debug("DataCards plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    Logger.setDebugMode(this.settings.debugMode);
    this.rendererService.updateSettings(this.settings);
    this.refreshAllDataCards(true);
  }
  /**
   * Process a datacards code block
   * 
   * @param source The content of the code block
   * @param el The HTML element to render into
   * @param ctx The markdown post processor context
   */
  async processDataCardsBlock(source, el, ctx) {
    Logger.debug("Processing DataCards block");
    if (!this.dataviewApiUtil.isDataviewEnabled()) {
      Logger.error("Dataview plugin is not enabled");
      el.createEl("div", {
        cls: "datacards-error",
        text: "Dataview plugin is required but not enabled"
      });
      return;
    }
    const isDataviewReady = await this.dataviewApiUtil.waitForDataviewReady();
    if (!isDataviewReady) {
      Logger.warn("Timed out waiting for Dataview to be ready");
    }
    try {
      const { query, settings } = this.parserService.parseDataCardsBlock(source);
      Logger.debug("Parsed query:", query);
      Logger.debug("Parsed settings:", settings);
      const sourcePath = ctx.sourcePath;
      const dataviewContainer = document.createElement("div");
      dataviewContainer.style.display = "none";
      document.body.appendChild(dataviewContainer);
      try {
        Logger.debug("Executing Dataview query");
        const result = await this.dataviewApiUtil.executeSafeQuery(query, sourcePath, dataviewContainer);
        document.body.removeChild(dataviewContainer);
        if (!result) {
          Logger.error("Result is undefined or null");
          el.createEl("div", {
            cls: "datacards-error",
            text: "Error executing Dataview query: undefined result"
          });
          return;
        }
        if (!result.successful) {
          const errorMessage = `Error executing Dataview query: ${result.value || "unknown error"}`;
          Logger.error(errorMessage);
          el.createEl("div", {
            cls: "datacards-error",
            text: errorMessage
          });
          return;
        }
        if (result.value && typeof result.value === "object" && "successful" in result.value && result.value.successful === false) {
          const errorMessage = `Error executing Dataview query: ${result.value.error || "unknown error"}`;
          Logger.error(errorMessage);
          el.createEl("div", {
            cls: "datacards-error",
            text: errorMessage
          });
          return;
        }
        if (result.value === void 0 || result.value === null) {
          Logger.error("Dataview returned null or undefined value");
          el.createEl("div", {
            cls: "datacards-error",
            text: "Dataview returned no results. Make sure your query is correct and returns data."
          });
          return;
        }
        if (Array.isArray(result.value) && result.value.length === 0) {
          Logger.debug("Dataview returned empty array");
          el.createEl("div", {
            cls: "datacards-info",
            text: "No files match your query criteria."
          });
          return;
        }
        if (result.value.values && Array.isArray(result.value.values) && result.value.values.length === 0) {
          Logger.debug("Dataview returned empty table");
          el.createEl("div", {
            cls: "datacards-info",
            text: "No files match your query criteria."
          });
          return;
        }
        let dataToRender = result.value;
        if (dataToRender && typeof dataToRender === "object" && "successful" in dataToRender && "value" in dataToRender) {
          Logger.debug("Unwrapping nested result structure");
          dataToRender = dataToRender.value;
        }
        if (settings.dynamicUpdate !== void 0) {
          Logger.debug(`Card has dynamicUpdate setting: ${settings.dynamicUpdate}`);
        }
        this.rendererService.renderCards(el, dataToRender, settings);
      } catch (queryError) {
        Logger.error("Error executing Dataview query:", queryError);
        if (document.body.contains(dataviewContainer)) {
          document.body.removeChild(dataviewContainer);
        }
        el.createEl("div", {
          cls: "datacards-error",
          text: `Error executing Dataview query: ${queryError.message || String(queryError)}`
        });
      }
    } catch (error) {
      Logger.error("DataCards error:", error);
      el.createEl("div", {
        cls: "datacards-error",
        text: `Error processing DataCards block: ${error.message || String(error)}`
      });
    }
  }
  /**
   * Refresh all datacards blocks in the current view
   * 
   * @param showNotification Whether to show a notification after refreshing
   */
  refreshAllDataCards(showNotification = true) {
    if (this.isRefreshing) return;
    this.isRefreshing = true;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (activeView) {
      activeView.previewMode.rerender(true);
      if (showNotification) {
        new import_obsidian3.Notice("DataCards refreshed", 2e3);
      }
      setTimeout(() => {
        if (this.lastActiveElement && document.body.contains(this.lastActiveElement)) {
          this.lastActiveElement.focus();
        }
        this.isRefreshing = false;
      }, 50);
    } else {
      if (showNotification) {
        new import_obsidian3.Notice("No active markdown view to refresh", 2e3);
      }
      this.isRefreshing = false;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
