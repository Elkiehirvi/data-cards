/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin-
*/

var M=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var $=Object.getOwnPropertyNames;var H=Object.prototype.hasOwnProperty;var F=(f,i)=>{for(var t in i)M(f,t,{get:i[t],enumerable:!0})},B=(f,i,t,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let a of $(i))!H.call(f,a)&&a!==t&&M(f,a,{get:()=>i[a],enumerable:!(e=L(i,a))||e.enumerable});return f};var R=f=>B(M({},"__esModule",{value:!0}),f);var I={};F(I,{default:()=>E});module.exports=R(I);var y=require("obsidian");var v={preset:"grid",imageProperty:"cover",imageHeight:"200px",imageFit:"cover",properties:"all",exclude:[],scrollableProperties:!1,contentHeight:"200px",showLabels:!0,cardSpacing:16,enableShadows:!0,propertiesAlign:"left",titleAlign:"left",fontSize:"default",booleanDisplayMode:"both",showBooleanLabels:!0,booleanTrueText:"true",booleanFalseText:"false",enableClickableCards:!1,defaultDateFormat:"YYYY-MM-DD",propertyFormatters:{},mobileColumns:1,mobilePreset:"grid",mobileImageHeight:"150px",mobileScrollableProperties:!0,mobileContentHeight:"150px",forceMobileMode:!1,enableLazyLoading:!1,enableDynamicUpdates:!1,refreshDelay:2500,debugMode:!1,showFileAsTitle:!0};var p=require("obsidian"),x=class extends p.PluginSettingTab{constructor(i,t){super(i,t),this.plugin=t}display(){let{containerEl:i}=this;i.empty(),new p.Setting(i).setName("Settings reference").setDesc("Open the complete settings reference guide on the website.").addButton(e=>e.setButtonText("Open reference website").setCta().onClick(()=>{window.open("https://sophokles187.github.io/data-cards/#/settings-reference","_blank")})),new p.Setting(i).setName("Presets").setHeading(),new p.Setting(i).setName("Default preset").setDesc("Choose the default preset for cards").addDropdown(e=>e.addOption("grid","Grid (balanced, 3 columns)").addOption("portrait","Portrait (optimized for book covers, 3 columns)").addOption("square","Square (1:1 cards with minimal text, 4 columns)").addOption("compact","Compact (side-by-side layout, 4 columns)").addOption("dense","Dense (maximum density, 6 columns)").setValue(this.plugin.settings.preset).onChange(async a=>{this.plugin.settings.preset=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Images").setHeading(),new p.Setting(i).setName("Default image property").setDesc("The frontmatter property to use for images").addText(e=>e.setPlaceholder("cover").setValue(this.plugin.settings.imageProperty).onChange(async a=>{this.plugin.settings.imageProperty=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Display").setHeading(),new p.Setting(i).setName("Show property labels").setDesc("Show labels for properties").addToggle(e=>e.setValue(this.plugin.settings.showLabels).onChange(async a=>{this.plugin.settings.showLabels=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Card spacing").setDesc("Space between cards (in pixels)").addSlider(e=>e.setLimits(0,32,4).setValue(this.plugin.settings.cardSpacing).setDynamicTooltip().onChange(async a=>{this.plugin.settings.cardSpacing=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Enable card shadows").setDesc("Add subtle shadows to cards for a more three-dimensional appearance").addToggle(e=>e.setValue(this.plugin.settings.enableShadows).onChange(async a=>{this.plugin.settings.enableShadows=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Properties alignment").setDesc("Text alignment for properties and their labels").addDropdown(e=>e.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.propertiesAlign).onChange(async a=>{this.plugin.settings.propertiesAlign=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Title alignment").setDesc("Text alignment for the title (filename)").addDropdown(e=>e.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.titleAlign).onChange(async a=>{this.plugin.settings.titleAlign=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Show file as title").setDesc("When using TABLE WITHOUT ID, show the file name as the card title").addToggle(e=>e.setValue(this.plugin.settings.showFileAsTitle).onChange(async a=>{this.plugin.settings.showFileAsTitle=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Font size").setDesc("Text size for all card elements (properties, labels, and title)").addDropdown(e=>e.addOption("larger","Larger (120%)").addOption("large","Large (110%)").addOption("default","Default (100%)").addOption("small","Small (90% - similar to dense preset)").addOption("smaller","Smaller (80%)").setValue(this.plugin.settings.fontSize).onChange(async a=>{this.plugin.settings.fontSize=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Card content").setHeading(),new p.Setting(i).setName("Scrollable properties").setDesc("Enable scrolling for card properties when they exceed the content height (Note: Square and Compact presets are scrollable by default)").addToggle(e=>e.setValue(this.plugin.settings.scrollableProperties).onChange(async a=>{this.plugin.settings.scrollableProperties=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Card interaction").setHeading(),new p.Setting(i).setName("Enable clickable cards").setDesc("Make the entire card clickable to open the note (not just the title)").addToggle(e=>e.setValue(this.plugin.settings.enableClickableCards).onChange(async a=>{this.plugin.settings.enableClickableCards=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Content height").setDesc("Height of the scrollable content area (e.g., 200px)").addText(e=>e.setPlaceholder("200px").setValue(this.plugin.settings.contentHeight).onChange(async a=>{this.plugin.settings.contentHeight=a||"200px",await this.plugin.saveSettings()})),new p.Setting(i).setName("Formatting").setHeading(),new p.Setting(i).setName("Default date format").setDesc("Format for displaying dates (YYYY = year, MM = month, DD = day)").addText(e=>e.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.defaultDateFormat).onChange(async a=>{this.plugin.settings.defaultDateFormat=a||"YYYY-MM-DD",await this.plugin.saveSettings()})),new p.Setting(i).setName("Boolean display").setHeading(),new p.Setting(i).setName("Boolean display mode").setDesc("How to display boolean values in cards").addDropdown(e=>e.addOption("both","Both checkbox and text").addOption("checkbox","Checkbox only").addOption("text","Text only").setValue(this.plugin.settings.booleanDisplayMode).onChange(async a=>{this.plugin.settings.booleanDisplayMode=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Show boolean labels").setDesc("Show text labels for boolean values").addToggle(e=>e.setValue(this.plugin.settings.showBooleanLabels).onChange(async a=>{this.plugin.settings.showBooleanLabels=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("True text").setDesc("Custom text to display for true values").addText(e=>e.setPlaceholder("true").setValue(this.plugin.settings.booleanTrueText).onChange(async a=>{this.plugin.settings.booleanTrueText=a||"true",await this.plugin.saveSettings()})),new p.Setting(i).setName("False text").setDesc("Custom text to display for false values").addText(e=>e.setPlaceholder("false").setValue(this.plugin.settings.booleanFalseText).onChange(async a=>{this.plugin.settings.booleanFalseText=a||"false",await this.plugin.saveSettings()})),new p.Setting(i).setName("Per-card boolean settings").setDesc("Individual cards can override these settings in their code block settings").setDisabled(!0),new p.Setting(i).setName("Mobile").setHeading(),new p.Setting(i).setName("Mobile preset").setDesc("Preset to use on mobile devices").addDropdown(e=>e.addOption("grid","Grid (balanced)").addOption("portrait","Portrait (optimized for book covers)").addOption("square","Square (1:1 cards with minimal text)").addOption("compact","Compact (side-by-side layout)").addOption("dense","Dense (maximum density)").setValue(this.plugin.settings.mobilePreset).onChange(async a=>{this.plugin.settings.mobilePreset=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Mobile columns").setDesc("Number of columns to use on mobile devices (default: 1)").addSlider(e=>e.setLimits(1,3,1).setValue(this.plugin.settings.mobileColumns).setDynamicTooltip().onChange(async a=>{this.plugin.settings.mobileColumns=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Mobile scrollable properties").setDesc("Enable scrolling for card properties on mobile devices").addToggle(e=>e.setValue(this.plugin.settings.mobileScrollableProperties).onChange(async a=>{this.plugin.settings.mobileScrollableProperties=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Mobile content height").setDesc("Height of the scrollable content area on mobile devices").addText(e=>e.setPlaceholder("150px").setValue(this.plugin.settings.mobileContentHeight).onChange(async a=>{this.plugin.settings.mobileContentHeight=a||"150px",await this.plugin.saveSettings()})),new p.Setting(i).setName("Force mobile mode").setDesc("Force the plugin to use mobile settings even on desktop (for testing)").addToggle(e=>e.setValue(this.plugin.settings.forceMobileMode).onChange(async a=>{this.plugin.settings.forceMobileMode=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Performance").setHeading(),new p.Setting(i).setName("Enable lazy loading").setDesc("Only load images when they become visible (improves performance with many cards)").addToggle(e=>e.setValue(this.plugin.settings.enableLazyLoading).onChange(async a=>{this.plugin.settings.enableLazyLoading=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Updates").setHeading(),new p.Setting(i).setName("Enable dynamic updates").setDesc("Automatically update DataCards when properties change (may impact performance)").addToggle(e=>e.setValue(this.plugin.settings.enableDynamicUpdates).onChange(async a=>{this.plugin.settings.enableDynamicUpdates=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Refresh delay").setDesc("Delay in milliseconds before refreshing after a property change (higher values give more time to complete typing)").addSlider(e=>e.setLimits(500,5e3,500).setValue(this.plugin.settings.refreshDelay).setDynamicTooltip().onChange(async a=>{this.plugin.settings.refreshDelay=a,await this.plugin.saveSettings()})).addExtraButton(e=>e.setIcon("reset").setTooltip("Reset to default (2500ms)").onClick(async()=>{this.plugin.settings.refreshDelay=2500,await this.plugin.saveSettings(),this.display()})),new p.Setting(i).setName("Per-card dynamic updates").setDesc('Individual cards can override the global setting with "dynamicUpdate: true/false" in their settings').setDisabled(!0),new p.Setting(i).setName("Developer").setHeading(),new p.Setting(i).setName("Debug mode").setDesc("Enable debug logging (only use during development or troubleshooting)").addToggle(e=>e.setValue(this.plugin.settings.debugMode).onChange(async a=>{this.plugin.settings.debugMode=a,await this.plugin.saveSettings()})),new p.Setting(i).setName("Help").setHeading();let t=i.createEl("div");t.innerHTML=`
      <p><strong>Basic Usage:</strong><br>
      Use the <code>datacards</code> code block to create card layouts from Dataview queries.</p>
      
      <p><strong>Example:</strong></p>
      <pre><code>
\`\`\`datacards
TABLE title, author, rating, cover FROM #books
SORT rating DESC

// Settings
preset: grid
imageFit: contain
defaultDateFormat: YYYY
\`\`\`
      </code></pre>
      
      <p><strong>Important:</strong> You must explicitly include all properties you want to display in your Dataview query (including the image property).</p>
      
      <p><strong>Image Support:</strong><br>
      The plugin supports external URLs, vault images, and wiki links:<br>
      <code>cover: https://example.com/image.jpg</code> or <code>cover: [[path/to/image.jpg]]</code></p>     
    
      <p><strong>Tip:</strong> Data Cards works best with the Editor-Setting "Readable line length" disabled. </p><br>

      <p><a href="https://sophokles187.github.io/data-cards/#/" target="_blank" rel="noopener">View documentation homepage</a></p>
    `}};var s=class{static setDebugMode(i){this.debugMode=i}static error(i,...t){console.error(`[DataCards] ${i}`,...t)}static warn(i,...t){console.warn(`[DataCards] ${i}`,...t)}static debug(i,...t){this.debugMode&&console.log(`[DataCards] ${i}`,...t)}};s.debugMode=!1;var C=class{parseDataCardsBlock(i){s.debug("Parsing datacards block");let t=/\n-{3,}\n|\n\/\/\s*Settings.*|\n\/\*\s*Settings\s*\*\/.*/,e=i.match(t),a=/^\/\/\s*Settings.*/,o=i.match(a),n,r;e&&e.index!==void 0?(s.debug("Found settings separator at index:",e.index),n=i.substring(0,e.index).trim(),r=i.substring(e.index+e[0].length).trim()):o?(s.debug("Block starts with settings marker"),n="",r=i.substring(o[0].length).trim()):(s.debug("No settings separator found"),n=i.trim(),r=""),s.debug("Extracted query:",n),n=this.ensureQueryType(n);let l=this.parseSettings(r),d=this.extractColumnAliases(n);return d.length>0&&(l.columnAliases=d,s.debug("Extracted column aliases:",d)),{query:n,settings:l}}extractColumnAliases(i){let t=[];if(!i.trim().toUpperCase().startsWith("TABLE"))return t;try{let e=i.match(/TABLE\s+(without\s+id\s+)?([\s\S]*?)(?:\s+FROM|\s+WHERE|\s+SORT|\s+GROUP BY|\s+LIMIT|\s+FLATTEN|$)/i);if(!e||!e[2])return t;let a=e[2].trim();if(s.debug("Extracted columns text:",a),!a)return t;let o=this.splitColumnsPreservingExpressions(a);for(let n of o){let r=n.match(/^(.*?)\s+as\s+(?:"([^"]+)"|'([^']+)'|([^\s,]+))$/i);if(r){let l=r[1].trim(),d=r[2]||r[3]||r[4],g=l;if(/^[a-zA-Z0-9_.-]+$/.test(l))g=l;else{let c=l.match(/\(\s*".*?"\s*\+\s*([a-zA-Z0-9_.-]+)\s*\+\s*".*?"\s*\)/);c&&c[1]&&(g=c[1],s.debug(`Extracted field name from complex expression: ${g}`))}t.push({original:g,alias:d,expression:l}),s.debug(`Found column alias: ${g} as "${d}"`)}}}catch(e){s.error("Error extracting column aliases:",e)}return t}splitColumnsPreservingExpressions(i){let t=[],e="",a=0,o=!1,n=!1;for(let r=0;r<i.length;r++){let l=i[r];if(l==='"'&&!n?o=!o:l==="'"&&!o&&(n=!n),!o&&!n&&(l==="("?a++:l===")"&&a--),l===","&&a===0&&!o&&!n){t.push(e.trim()),e="";continue}e+=l}return e.trim()&&t.push(e.trim()),t}ensureQueryType(i){if(!/\b(TABLE|LIST|TASK|CALENDAR)\b/i.test(i)){let e=i.split(`
`),a=-1;for(let o=0;o<e.length;o++){let n=e[o].trim();if(n&&!n.startsWith("//")&&!n.startsWith("/*")){a=o;break}}if(a>=0){let o=this.parseSettings(e.slice(a+1).join(`
`)),n="",r=[];return o.imageProperty&&r.push(o.imageProperty),n="",s.debug("Using simple TABLE query without property list"),n.trim()===""?e[a]="TABLE "+e[a]:e[a]="TABLE"+n+" "+e[a],e.join(`
`)}else return"TABLE "+i}return i}parseSettings(i){if(!i)return{};let t={},e=i.split(`
`);s.debug("Parsing settings from text");for(let a of e){if(a.trim().startsWith("//")||a.trim().startsWith("/*")||!a.trim())continue;let o=a.match(/^\s*([a-zA-Z0-9_]+)\s*:\s*(.+)\s*$/);if(o){let[,n,r]=o;if(s.debug(`Found setting: ${n} = ${r}`),n==="properties"&&r.trim().startsWith("[")&&r.trim().endsWith("]")){s.debug("Detected properties array");let l=r.substring(1,r.length-1).trim();if(l){let d=l.split(",").map(g=>g.trim());t[n]=d}else t[n]=[]}else n==="defaultDateFormat"?t[n]=r.trim():n==="dynamicUpdate"?(t[n]=this.parseValue(r.trim()),s.debug(`Parsed dynamicUpdate setting: ${t[n]}`)):t[n]=this.parseValue(r.trim())}}return t}parseValue(i){s.debug("Parsing value:",i);try{return JSON.parse(i)}catch(t){}if(i.startsWith("[")&&i.endsWith("]")){s.debug("Detected array syntax");let t=i.substring(1,i.length-1).trim();return t?t.split(",").map(a=>a.trim()):[]}return/^-?\d+(\.\d+)?$/.test(i)?Number(i):i.toLowerCase()==="true"?!0:i.toLowerCase()==="false"?!1:i}};var S=require("obsidian");var T=class{constructor(i,t){this.currentSettings=null;this.app=i,this.pluginSettings=t}updateSettings(i){this.pluginSettings=i}isMobileDevice(){return S.Platform.isMobile||this.pluginSettings.forceMobileMode}renderCards(i,t,e,a){s.debug("SPECIAL CHECK - renderCards called with results:",t);let o=!1;if(t&&t.values&&Array.isArray(t.values)&&t.values.length===0?(s.debug("Empty table detected in renderCards"),o=!0):Array.isArray(t)&&t.length===0?(s.debug("Empty array detected in renderCards"),o=!0):t&&typeof t=="object"&&!Array.isArray(t)&&Object.keys(t).length===2&&(s.debug("Object with exactly 2 keys detected in renderCards:",Object.keys(t)),o=!0),o){s.debug("Rendering empty state from renderCards"),this.renderEmptyState(i,"No notes found");return}let n=this.isMobileDevice();s.debug("Is mobile device:",n);let r={...this.pluginSettings};s.debug("Initial settings from plugin:",{preset:r.preset,imageHeight:r.imageHeight,mobileColumns:r.mobileColumns,mobilePreset:r.mobilePreset,mobileImageHeight:r.mobileImageHeight}),r={...r,...e},s.debug("After applying block settings:",{preset:r.preset,imageHeight:r.imageHeight,mobileColumns:r.mobileColumns,mobilePreset:r.mobilePreset,mobileImageHeight:r.mobileImageHeight}),n&&(s.debug("Applying mobile settings..."),s.debug(`Using mobile columns: ${r.mobileColumns}`),r.mobilePreset!==void 0&&(s.debug(`Overriding preset: ${r.preset} with mobilePreset: ${r.mobilePreset}`),r.preset=r.mobilePreset),r.mobileImageHeight!==void 0&&(s.debug(`Overriding imageHeight: ${r.imageHeight} with mobileImageHeight: ${r.mobileImageHeight}`),r.imageHeight=r.mobileImageHeight),s.debug("Final settings after applying mobile settings:",{preset:r.preset,imageHeight:r.imageHeight})),this.currentSettings=r;let l=i.createEl("div",{cls:"datacards-container",attr:{"data-datacards-container":"true"}});l.addClass(`datacards-preset-${r.preset}`),r.enableShadows||l.addClass("datacards-no-shadows"),r.fontSize&&r.fontSize!=="default"?(l.addClass(`datacards-font-${r.fontSize}`),s.debug(`Applied font size class: datacards-font-${r.fontSize}`)):r.preset==="dense"&&(!r.fontSize||r.fontSize==="default")&&(l.addClass("datacards-font-small"),s.debug("Applied small font size for dense preset")),l.style.setProperty("--card-gap",`${r.cardSpacing}px`);let d;if(n)d=r.mobileColumns;else{let c=3;r.preset==="dense"?c=6:r.preset==="compact"||r.preset==="square"?c=4:r.preset==="portrait"&&(c=3),d=e.columns!==void 0?e.columns:c}s.debug(`Using ${d} columns`),l.style.setProperty("--card-columns",d.toString(),"important");let g;if(e.imageHeight!==void 0?g=r.imageHeight:r.preset==="portrait"?g="350px":r.preset==="square"||r.preset==="compact"?g="200px":r.preset==="dense"?g="120px":g="200px",(typeof g=="number"||/^\d+$/.test(g))&&(g=`${g}px`),l.style.setProperty("--image-height",g),e.imageFit!==void 0)l.style.setProperty("--image-fit",r.imageFit);else{let c=r.preset==="portrait"?"contain":"cover";l.style.setProperty("--image-fit",c)}t&&t.values&&Array.isArray(t.values)?(s.debug("Detected table-like results with values array"),this.renderTableResults(l,t,r,a)):t&&Array.isArray(t)?(s.debug("Detected array results"),this.renderArrayResults(l,t,r,a)):t&&typeof t=="object"?(s.debug("Detected object results"),this.renderObjectResults(l,t,r,a)):(s.debug("No valid results detected"),this.renderError(l,"No results or unsupported result type"))}renderError(i,t){let e=i.createEl("div",{cls:"datacards-error",text:t})}renderEmptyState(i,t="No notes found"){s.debug("renderEmptyState called with message:",t);let e=i.createEl("div",{cls:"datacards-container",attr:{"data-datacards-container":"true"}});s.debug("Created cards container for empty state");let a=e.createEl("div",{cls:"datacards-empty-state",text:t});s.debug("Added empty state element with class:","datacards-empty-state")}renderTableResults(i,t,e,a){let{values:o,headers:n}=t;s.debug("Rendering table results:"),s.debug("- Headers:",n),s.debug("- Number of rows:",o.length),o.forEach((r,l)=>{s.debug(`Processing row ${l}`);let d=this.createCardElement(i);e.imageProperty&&r[n.indexOf(e.imageProperty)]!==void 0&&this.addImageToCard(d,r[n.indexOf(e.imageProperty)]);let g=d.createEl("div",{cls:"datacards-content"}),c=null;if(n.includes("File")||n.includes("file")){let h=n.findIndex(k=>k.toLowerCase()==="file");h>=0&&(c=r[h])}if(!c&&r.file&&(c=r.file),!c&&r.path&&(c=r.path),!c&&r.source&&(c=r.source),!c&&r.originalFile&&(c=r.originalFile),c&&e.showFileAsTitle){let h=g.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(h,c),e.enableClickableCards&&this.makeCardClickable(d,c)}else c&&e.enableClickableCards&&this.makeCardClickable(d,c);let u=g.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(e)){u.addClass("datacards-scrollable-properties");let h=this.getContentHeight(e);u.style.setProperty("--content-height",h)}let m=[];e.properties==="all"?(m=[...n],s.debug("Using all headers as properties:",m)):Array.isArray(e.properties)?(m=[...e.properties],s.debug("Using specified properties:",m)):s.debug("No properties specified, using empty array");let w=m.filter(h=>!e.exclude.includes(h)&&h!==e.imageProperty&&h.toLowerCase()!=="file");s.debug("Filtered properties (after excluding file):",w),w.forEach(h=>{if(s.debug(`Checking property '${h}' in headers:`,n.includes(h)),n.includes(h)){let k=n.indexOf(h),P=r[k];s.debug(`Property '${h}' value:`,P),s.debug(`Property '${h}' type:`,typeof P),this.addPropertyToCard(u,h,P,e,a)}else s.debug(`Property '${h}' not found in headers`)}),w.length===0&&!n.some(h=>h.toLowerCase()==="file")&&(s.debug("No properties were added to the card"),g.createEl("div",{cls:"datacards-property",text:"No properties to display"}))})}renderArrayResults(i,t,e,a){t.forEach(o=>{let n=this.createCardElement(i);e.imageProperty&&o[e.imageProperty]&&this.addImageToCard(n,o[e.imageProperty]);let r=n.createEl("div",{cls:"datacards-content"}),l=null;if("file"in o&&(l=o.file),!l&&"path"in o&&(l=o.path),l){let m=r.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(m,l),e.enableClickableCards&&this.makeCardClickable(n,l)}let d=r.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(e)){d.addClass("datacards-scrollable-properties");let m=this.getContentHeight(e);d.style.setProperty("--content-height",m)}let c=Object.keys(o);(e.properties==="all"?c:Array.isArray(e.properties)?e.properties:[]).filter(m=>!e.exclude.includes(m)&&m!==e.imageProperty&&m.toLowerCase()!=="file").forEach(m=>{m in o&&this.addPropertyToCard(d,m,o[m],e,a)})})}renderObjectResults(i,t,e,a){let o=this.createCardElement(i);e.imageProperty&&t[e.imageProperty]&&this.addImageToCard(o,t[e.imageProperty]);let n=o.createEl("div",{cls:"datacards-content"});if("file"in t){let u=n.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(u,t.file),e.enableClickableCards&&this.makeCardClickable(o,t.file)}let r=n.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(e)){r.addClass("datacards-scrollable-properties");let u=this.getContentHeight(e);r.style.setProperty("--content-height",u)}let d=Object.keys(t);(e.properties==="all"?d:Array.isArray(e.properties)?e.properties:[]).filter(u=>!e.exclude.includes(u)&&u!==e.imageProperty&&u.toLowerCase()!=="file").forEach(u=>{u in t&&this.addPropertyToCard(r,u,t[u],e,a)})}createCardElement(i){var e;let t=i.createEl("div",{cls:"datacards-card"});return(e=this.currentSettings)!=null&&e.enableClickableCards&&t.addClass("datacards-clickable-card"),t}makeCardClickable(i,t){if(!t)return;let e;if(typeof t=="object"&&t!==null?"path"in t?e=t.path:"link"in t?e=t.link:e=String(t):e=String(t),e.includes("[[")&&e.includes("]]")){let a=e.match(/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/);a?e=a[1]:e=e.substring(2,e.length-2).split("|")[0]}i.addClass("datacards-clickable-card"),i.addEventListener("click",a=>{a.target.closest(".internal-link")||(this.app.workspace.openLinkText(e,"",!1,{active:!0}),a.stopPropagation())})}addImageToCard(i,t){var n;let e=i.createEl("div",{cls:"datacards-image-container"}),a;typeof t=="object"&&t!==null?(s.debug("Image value is an object:",t),"path"in t?(a=t.path,s.debug("Extracted path from Link object:",a)):(a=String(t),s.debug("Converted object to string:",a))):(a=String(t),s.debug("Image value is a string:",a)),a=this.extractImageSource(a),s.debug("After image source extraction:",a);let o=e.createEl("div",{cls:"datacards-image-placeholder",text:"Loading image..."});(n=this.currentSettings)!=null&&n.enableLazyLoading?this.lazyLoadImage(e,o,a):this.loadImage(e,o,a)}extractImageSource(i){if(!i||typeof i!="string")return String(i||"");let t=i.match(/!\[(.*?)\]\((.*?)\)/);if(t){let o=t[2];return s.debug("Extracted URL from markdown image syntax:",o),o.replace(/['",.;:]+$/,"")}let e=i.match(/\[\[(.*?)\]\]/);if(e){let o=`[[${e[1]}]]`;return s.debug("Extracted wiki link:",o),o}let a=i.match(/(https?:\/\/[^\s"'<>[\]{}]+)/);if(a){let o=a[1];return s.debug("Extracted URL:",o),o.replace(/['",.;:]+$/,"")}return i}lazyLoadImage(i,t,e){s.debug("Lazy loading image:",e),new IntersectionObserver((o,n)=>{o.forEach(r=>{r.isIntersecting&&(s.debug("Image container is now visible, loading image:",e),this.loadImage(i,t,e),n.disconnect())})},{rootMargin:"100px",threshold:.1}).observe(i)}loadImage(i,t,e){let a=e.match(/!\[(.*?)\]\((.*?)\)/);if(a){let o=a[2];s.debug("Extracted URL from markdown image syntax:",o),this.loadImage(i,t,o);return}if(e.startsWith("http")||e.startsWith("https")){s.debug("Handling as external URL:",e);let o=e.replace(/['",.;:]+$/,"");s.debug("Cleaned URL:",o),this.loadExternalImage(i,t,o)}else if(e.startsWith("[[")&&e.endsWith("]]")){s.debug("Handling as wiki link");let o=e.substring(2,e.length-2),n=o;o.includes("|")&&(n=o.split("|")[0]);try{let r=this.app.vault.getAbstractFileByPath(n);if(r&&"stat"in r){s.debug("Found file in vault:",r);let l=r,d=this.app.vault.getResourcePath(l);s.debug("Resource path:",d);let g=i.createEl("img",{cls:"datacards-image",attr:{src:d}});g.onload=()=>{t.remove(),g.addClass("loaded")},g.onerror=()=>{t.setText("Image not found")}}else s.debug("File not found in vault or not a file:",n),t.setText("Image not found")}catch(r){s.debug("Error loading image:",r),t.setText("Error loading image")}}else{s.debug("Handling as local path");try{let o=this.app.vault.getAbstractFileByPath(e);if(o&&"stat"in o){s.debug("Found file in vault:",o);let n=o,r=this.app.vault.getResourcePath(n);s.debug("Resource path:",r);let l=i.createEl("img",{cls:"datacards-image",attr:{src:r}});l.onload=()=>{t.remove(),l.addClass("loaded")},l.onerror=()=>{t.setText("Image not found")}}else s.debug("File not found in vault:",e),t.setText("Image not found")}catch(o){s.debug("Error loading image:",o),t.setText("Error loading image")}}}loadExternalImage(i,t,e){s.debug("Loading external image with URL:",e);let a=i.createEl("img",{cls:"datacards-image",attr:{src:e,crossorigin:"anonymous"}});a.onload=()=>{s.debug("External image loaded successfully:",e),t.remove(),a.addClass("loaded")},a.onerror=o=>{s.debug("Failed to load external image with crossorigin attribute:",e),s.debug("Trying again without crossorigin attribute"),a.removeAttribute("crossorigin"),a.onload=()=>{s.debug("External image loaded successfully without crossorigin:",e),t.remove(),a.addClass("loaded")},a.onerror=n=>{s.debug("Failed to load external image without crossorigin:",e);let r=`https://images.weserv.nl/?url=${encodeURIComponent(e)}`;s.debug("Trying with image proxy service:",r),a.src=r,a.onload=()=>{s.debug("External image loaded successfully via proxy:",r),t.remove(),a.addClass("loaded")},a.onerror=l=>{s.debug("All attempts to load image failed:",e),t.setText("Image not found - URL: "+e);try{let d=document.createElement("img");d.style.display="none",d.src=e,document.body.appendChild(d),setTimeout(()=>{document.body.contains(d)&&document.body.removeChild(d)},3e3)}catch(d){s.debug("Error during final test:",d)}}}}}addPropertyToCard(i,t,e,a,o){s.debug(`Adding property to card: ${t} = ${e}`),s.debug(`Property type: ${typeof e}`);let n=i.createEl("div",{cls:"datacards-property"});a.propertiesAlign&&n.addClass(`datacards-text-${a.propertiesAlign}`);let r=t;if(a.columnAliases){let l=a.columnAliases.find(d=>d.original===t);l&&(r=l.alias,s.debug(`Using alias "${r}" for property "${t}"`))}if(a.showLabels){let l=n.createEl("div",{cls:"datacards-property-label",text:r});a.propertiesAlign&&l.addClass(`datacards-text-${a.propertiesAlign}`)}if(t.toLowerCase()==="file")this.formatFileProperty(n,e);else{let l=a.propertyFormatters[t];l?this.formatPropertyWithCustomFormatter(n,e,l):this.formatPropertyByType(n,e,o)}}formatPropertyWithCustomFormatter(i,t,e){let a=i.createEl("div",{cls:"datacards-property-value"});switch(e.type){case"stars":this.formatAsStars(a,t,e.options);break;case"badge":this.formatAsBadge(a,t,e.options);break;case"progress":this.formatAsProgress(a,t,e.options);break;case"date":this.formatAsDate(a,t,e.options);break;case"tags":this.formatAsTags(a,t,e.options);break;default:a.setText(String(t))}}processRichText(i,t,e){if(typeof t!="string")return!1;s.debug("Processing rich text:",t);let a=/<[a-z][\s\S]*>/i.test(t),o=t.includes("[[");if(!o&&!a)return s.debug("Content is plain text, skipping rich text processing."),!1;s.debug(`Content has wiki links: ${o}, has HTML: ${a}`);let n=this.tokenizeRichText(t);return s.debug("Tokens:",n),n.forEach(r=>{r.type==="wikilink"?this.createWikiLink(i,r.content):(r.type==="html"||r.type==="text")&&S.MarkdownRenderer.renderMarkdown(r.content,i,"",e)}),!0}tokenizeRichText(i){let t=[],e=/(\[\[.*?\]\])|(<[^>]+>|&[a-zA-Z#0-9]+;)/g,a=0,o;for(;(o=e.exec(i))!==null;)o.index>a&&t.push({type:"text",content:i.substring(a,o.index)}),o[1]?t.push({type:"wikilink",content:o[1]}):o[2]&&t.push({type:"html",content:o[2]}),a=o.index+o[0].length;return a<i.length&&t.push({type:"text",content:i.substring(a)}),t}createWikiLink(i,t){var l;s.debug("Creating wiki link from text:",t);let e=/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/,a=t.match(e);if(!a){i.appendChild(document.createTextNode(t)),s.debug("Invalid wiki link format passed to createWikiLink:",t);return}let o=a[1],n=a[2]||o;s.debug(`Creating wiki link: path="${o}", display="${n}"`);let r=i.createEl("a",{cls:"internal-link",text:n,attr:{href:o,"data-href":o,"data-type":"link",target:"_blank",rel:"noopener"}});try{this.app.workspace.hoverPopover?this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:r,targetEl:r,linktext:o,sourcePath:(l=this.app.workspace.getActiveFile())==null?void 0:l.path}):s.debug("Hover popover not available, skipping hover registration.")}catch(d){s.debug("Error registering hover link:",d)}}formatPropertyByType(i,t,e){var o,n,r,l;s.debug("formatPropertyByType called with value:",t),s.debug("Value type:",typeof t),typeof t=="string"&&(s.debug("String value length:",t.length),s.debug("String value exact content:",JSON.stringify(t)));let a=i.createEl("div",{cls:"datacards-property-value"});if(i.hasClass("datacards-text-left")?a.addClass("datacards-text-left"):i.hasClass("datacards-text-center")?a.addClass("datacards-text-center"):i.hasClass("datacards-text-right")&&a.addClass("datacards-text-right"),t==null)a.setText("");else if(Array.isArray(t))s.debug("Processing array value:",t),t.forEach((d,g)=>{if(g>0&&a.appendChild(document.createTextNode(", ")),typeof d=="string"){let c=d.replace(/^["'](.*?)["']$/,"$1");s.debug(`Processing array item ${g}:`,{original:d,cleaned:c}),c.match(/^\[\[(.*?)\]\]$/)?(s.debug(`Creating wiki link from array item: ${c}`),this.createWikiLink(a,c)):(s.debug(`Treating array item as plain/rich text: ${c}`),this.processRichText(a,c,e)||a.appendChild(document.createTextNode(c)))}else if(typeof d=="object"&&d!==null&&"path"in d&&"type"in d&&d.type==="file"){s.debug("Handling Dataview Link object within array:",d);let c=d.path,u=d.display||this.getCleanFilename(c);this.createWikiLink(a,`[[${c}|${u}]]`)}else s.debug(`Treating array item as other type: ${d}`),a.appendChild(document.createTextNode(String(d)))});else if(typeof t=="boolean"){s.debug(`Formatting boolean property with value: ${t} (${typeof t})`);let d=a.createEl("div",{cls:"datacards-boolean-container"});i.hasClass("datacards-text-left")?d.addClass("datacards-text-left"):i.hasClass("datacards-text-center")?d.addClass("datacards-text-center"):i.hasClass("datacards-text-right")&&d.addClass("datacards-text-right");let g=((o=this.currentSettings)==null?void 0:o.booleanDisplayMode)||"both",c=((n=this.currentSettings)==null?void 0:n.showBooleanLabels)!==!1,u=((r=this.currentSettings)==null?void 0:r.booleanTrueText)||"true",b=((l=this.currentSettings)==null?void 0:l.booleanFalseText)||"false";if((g==="both"||g==="text")&&c){if(g==="text"){let w=d.createEl("input",{cls:"datacards-checkbox",attr:{type:"checkbox",disabled:"disabled","data-boolean-value":t.toString(),style:"display: none;"}});w.checked=t}let m=d.createEl("span",{cls:"datacards-boolean-text",text:t?u:b})}if(g==="both"||g==="checkbox"){let m=d.createEl("input",{cls:"datacards-checkbox",attr:{type:"checkbox",disabled:"disabled","data-boolean-value":t.toString()}});m.checked=t,s.debug(`Created checkbox with checked=${t}, data-boolean-value=${t.toString()}`)}}else if(typeof t=="number")a.setText(t.toString());else if(t instanceof Date)this.formatAsDate(a,t);else if(typeof t=="string"){if(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{2}:\d{2}$/.test(t)||/^\d{4}-\d{2}-\d{2}$/.test(t)){let c=new Date(t);if(!isNaN(c.getTime())){this.formatAsDate(a,c);return}}if(this.processRichText(a,t,e))return;let g=t.match(/!\[(.*?)\]\((.*?)\)/);if(g){s.debug("Found markdown image in property value (fallback)");let c=g[2],u=g[1];a.addClass("loading");let b=a.createEl("img",{cls:"datacards-property-image loading",attr:{src:c,alt:u||"Image",crossorigin:"anonymous"}});b.onload=()=>{s.debug("Property image loaded successfully:",c),b.removeClass("loading")},b.onerror=()=>{s.debug("Failed to load property image:",c),b.remove(),a.removeClass("loading"),a.addClass("image-error"),a.setText("Image not found: "+c)};return}if(t.startsWith("#")){let c=a.createEl("a",{cls:"datacards-tag tag-link",text:t,attr:{href:t,"data-href":t,"data-type":"tag"}});return}s.debug("Treating value as plain text:",t),a.setText(t)}else if(typeof t=="object"&&t!==null){if("path"in t&&"type"in t&&t.type==="file"){s.debug("Handling Dataview Link object:",t);let d=t.path,g=t.display||this.getCleanFilename(d);s.debug(`Creating link from Dataview Link object: path="${d}", display="${g}"`),this.createWikiLink(a,`[[${d}|${g}]]`);return}if("ts"in t&&typeof t.ts=="number"){let d=new Date(t.ts);if(!isNaN(d.getTime())){this.formatAsDate(a,d);return}}a.setText(String(t))}else a.setText(String(t))}formatAsStars(i,t,e){let a=(e==null?void 0:e.max)||5,o="\u2605",n="\u2606",r=i.createEl("div",{cls:"datacards-stars"}),l=Math.min(Math.max(0,t),a);for(let d=0;d<l;d++)r.createEl("span",{cls:"datacards-star datacards-star-full",text:o});for(let d=l;d<a;d++)r.createEl("span",{cls:"datacards-star datacards-star-empty",text:n})}formatAsBadge(i,t,e){let a=i.createEl("span",{cls:"datacards-badge",text:t});e!=null&&e.color&&(a.style.backgroundColor=e.color)}formatAsProgress(i,t,e){let a=(e==null?void 0:e.max)||100,o=Math.min(Math.max(0,t),a)/a*100,n=i.createEl("div",{cls:"datacards-progress-container"}),r=n.createEl("div",{cls:"datacards-progress-bar"});r.style.width=`${o}%`,e!=null&&e.showText&&n.createEl("span",{cls:"datacards-progress-text",text:`${Math.round(o)}%`})}formatAsDate(i,t,e){let a=typeof t=="string"?new Date(t):t;if(isNaN(a.getTime())){i.setText(String(t));return}let o=(e==null?void 0:e.format)||(this.currentSettings?this.currentSettings.defaultDateFormat:v.defaultDateFormat),n=a.getFullYear(),r=(a.getMonth()+1).toString().padStart(2,"0"),l=a.getDate().toString().padStart(2,"0"),d=o.replace("YYYY",n.toString()).replace("MM",r).replace("DD",l);i.setText(d)}formatFileProperty(i,t){var o;let e=i.createEl("div",{cls:"datacards-property-value datacards-file-property"});if((o=this.currentSettings)!=null&&o.titleAlign?e.addClass(`datacards-text-${this.currentSettings.titleAlign}`):i.hasClass("datacards-text-left")?e.addClass("datacards-text-left"):i.hasClass("datacards-text-center")?e.addClass("datacards-text-center"):i.hasClass("datacards-text-right")&&e.addClass("datacards-text-right"),t==null){e.setText("");return}let a;if(typeof t=="object"&&t!==null?"path"in t?a=t.path:"link"in t?a=t.link:a=String(t):a=String(t),a=this.extractImageSource(a),s.debug("File property after image source extraction:",a),typeof t=="string"&&t.includes("[[")&&t.includes("|")&&t.includes("]]")){s.debug("Found wiki link with pipe character:",t);let n=t.match(/\[\[.*\|(.*?)\]\]/);if(n&&n[1]){s.debug("Extracted display text:",n[1]);let r=t.match(/\[\[(.*?)\|(.*?)\]\]/);if(r){let l=r[1],d=r[2];s.debug(`Creating link from pipe syntax - path: "${l}", display: "${d}"`);let g=e.createEl("a",{cls:"internal-link datacards-file-link",text:d,attr:{href:l,"data-href":l,"data-type":"link"}});s.debug("Created link element for pipe syntax:",g);try{this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:g,targetEl:g,linktext:l})}catch(c){}return}else{s.debug("Fallback to text only for pipe syntax"),e.setText(n[1]);return}}}if(a.includes("[[")&&a.includes("]]")){s.debug("Found wiki link in file property:",a);let n=a.match(/\[\[([^\]]+)\]\]/);if(n){let r=n[1],l=r,d=r;if(r.includes("|")){let c=r.split("|");d=c[0],l=c[1]}else l=this.getCleanFilename(d);let g=e.createEl("a",{cls:"internal-link datacards-file-link",text:l,attr:{href:d,"data-href":d,"data-type":"link"}})}}else if(a.startsWith("[[")&&a.endsWith("]]")){let n=a.substring(2,a.length-2),r=n,l=n;if(n.includes("|")){let g=n.split("|");l=g[0],r=g[1]}else r=this.getCleanFilename(l);let d=e.createEl("a",{cls:"internal-link datacards-file-link",text:r,attr:{href:l,"data-href":l,"data-type":"link"}})}else{let n=this.getCleanFilename(a),r=e.createEl("a",{cls:"internal-link datacards-file-link",text:n,attr:{href:a,"data-href":a,"data-type":"link"}})}}getCleanFilename(i){let t=i;return t.includes("/")&&(t=t.split("/").pop()||t),t.endsWith(".md")&&(t=t.substring(0,t.length-3)),t}formatAsTags(i,t,e){let a=i.createEl("div",{cls:"datacards-tags-container"});(Array.isArray(t)?t:[t]).forEach(n=>{let r=n.startsWith("#")?n:`#${n}`,l=a.createEl("a",{cls:"datacards-tag tag-link",text:r,attr:{href:r,"data-href":r,"data-type":"tag"}})})}shouldUseScrollableProperties(i){let t=!1;return(i.preset==="square"||i.preset==="compact")&&(t=!0),this.pluginSettings.scrollableProperties!==void 0&&(t=this.pluginSettings.scrollableProperties),this.isMobileDevice()&&this.pluginSettings.mobileScrollableProperties!==void 0&&(t=this.pluginSettings.mobileScrollableProperties),i.scrollableProperties!==void 0&&(t=i.scrollableProperties),t}getContentHeight(i){let t="200px";return this.pluginSettings.contentHeight&&(t=this.pluginSettings.contentHeight),this.isMobileDevice()&&this.pluginSettings.mobileContentHeight&&(t=this.pluginSettings.mobileContentHeight),i.contentHeight&&(t=i.contentHeight),t}};var D=class{constructor(i){this.plugin=i}isDataviewEnabled(){return this.plugin.app.plugins.plugins.dataview!==void 0}getDataviewApi(){return this.isDataviewEnabled()?this.plugin.app.plugins.plugins.dataview.api:null}async executeQuery(i,t,e){let a=this.getDataviewApi();if(!a)return null;try{return await a.query(i,t,e)}catch(o){throw s.error("Error executing Dataview query:",o),o}}async waitForDataviewReady(){let i=this.getDataviewApi();return i?i.index&&i.index.initialized?(s.debug("Dataview index is already initialized"),!0):(s.debug("Waiting for Dataview index to be ready..."),new Promise(t=>{let e=this.plugin.app,a=e.metadataCache.on("dataview:index-ready",()=>{s.debug("Dataview index is now ready"),e.metadataCache.offref(a),t(!0)});setTimeout(()=>{s.warn("Timed out waiting for Dataview index"),e.metadataCache.offref(a),t(!1)},5e3)})):!1}async executeSafeQuery(i,t,e,a=0){let o=this.getDataviewApi();if(!o)return s.error("Dataview API not found. Make sure Dataview plugin is enabled."),{successful:!1,value:"Dataview plugin is not enabled"};if(!i||i.trim()==="")return s.error("Empty Dataview query"),{successful:!1,value:"Empty query"};s.debug("Executing Dataview query:",i),s.debug("Source path:",t);try{if(typeof o.query=="function"){s.debug("Using api.query method");try{let n=await o.query(i,t,e);return s.debug("Direct query result type:",typeof n),n==null?(s.error("Direct query returned undefined or null"),{successful:!1,value:"No results returned"}):(n&&typeof n=="object"&&("values"in n&&Array.isArray(n.values)&&s.debug("Result contains a values array with length:",n.values.length),"headers"in n&&Array.isArray(n.headers)&&s.debug("Result contains headers:",n.headers)),n&&typeof n=="object"&&"values"in n&&Array.isArray(n.values)&&n.values.length===0&&a<3?(s.debug(`Empty result, retrying (attempt ${a+1}/3)...`),new Promise(r=>{setTimeout(async()=>{let l=await this.executeSafeQuery(i,t,e,a+1);r(l)},500)})):{successful:!0,value:n})}catch(n){return s.error("Error in direct query:",n),{successful:!1,value:n?n.message||String(n):"Error in query execution"}}}else return s.error("Dataview API query method not found."),{successful:!1,value:"Incompatible Dataview API version"}}catch(n){return s.error("Error executing Dataview query:",n),{successful:!1,value:n?n.message||String(n):"Unknown error"}}}};function A(f,i,t=!1){let e=null,a=null,o=null,n;function r(...l){s.debug(`Debounce called, wait time: ${i}ms, has existing timeout: ${e!==null}`);let d=this;e&&(s.debug("Clearing previous debounce timeout"),clearTimeout(e),e=null),a=l,o=d;let g=()=>{s.debug("Debounce timeout expired, executing function"),e=null,t||(n=f.apply(d,l),e||(a=o=null))},c=t&&!e;return s.debug(`Setting new debounce timeout for ${i}ms`),e=setTimeout(g,i),c&&(s.debug("Immediate execution requested"),n=f.apply(d,l),a=o=null),n}return r.cancel=()=>{e&&clearTimeout(e),e=a=o=null},r.flush=()=>(e&&(clearTimeout(e),e=null,t||(n=f.apply(o,a),a=o=null)),n),r}var E=class extends y.Plugin{constructor(){super(...arguments);this.isRefreshing=!1;this.lastActiveElement=null}async onload(){await this.loadSettings(),s.setDebugMode(this.settings.debugMode),this.parserService=new C,this.rendererService=new T(this.app,this.settings),this.dataviewApiUtil=new D(this),this.updateDebouncedRefresh(),this.registerMarkdownCodeBlockProcessor("datacards",this.processDataCardsBlock.bind(this)),this.addSettingTab(new x(this.app,this)),this.addCommand({id:"refresh-datacards",name:"Refresh DataCards in active view",callback:()=>{this.refreshActiveView(!0)}}),this.registerDataviewEvents(),this.registerMetaBindEvents(),s.debug("DataCards plugin loaded")}updateDebouncedRefresh(){this.debouncedRefresh=A(()=>{s.debug(`Debounced refresh executing after ${this.settings.refreshDelay}ms`),this.refreshActiveView(!1)},this.settings.refreshDelay)}registerMetaBindEvents(){this.app.workspace.onLayoutReady(()=>{var t;if(this.metaBindPlugin=(t=this.app.plugins)==null?void 0:t.plugins["meta-bind"],!this.metaBindPlugin){s.debug("Meta Bind plugin not found or Obsidian plugins structure not accessible as expected. Skipping Meta Bind event registration.");return}s.debug("Meta Bind plugin found. Registering event listeners."),this.registerEvent(this.app.metadataCache.on("changed",e=>{e&&e.path&&(s.debug(`Obsidian metadata changed for file: ${e.path}`),this.handleMetaBindChange(e.path,null,null))})),this.metaBindPlugin.api&&typeof this.metaBindPlugin.api.onChange=="function"&&(s.debug("Registering using Meta Bind api.onChange"),this.registerEvent(this.metaBindPlugin.api.onChange((e,a,o)=>{let n=typeof e=="string"?e:e==null?void 0:e.path;n?(typeof o=="boolean"?s.debug(`Meta Bind onChange event (TOGGLE): file=${n}, key=${a}, value=${JSON.stringify(o)}`):s.debug(`Meta Bind onChange event: file=${n}, key=${a}, value=${JSON.stringify(o)}`),typeof o=="boolean"?(s.debug("Toggle input detected - using immediate refresh"),setTimeout(()=>{this.refreshActiveView(!1)},50)):this.handleMetaBindChange(n,a,o)):s.warn("Meta Bind onChange event received without a valid file path.")}))),this.metaBindPlugin.metadataManager&&typeof this.metaBindPlugin.metadataManager.on=="function"&&(s.debug("Registering using Meta Bind metadataManager events"),this.registerEvent(this.metaBindPlugin.metadataManager.on("changed",(e,a)=>{e&&e.storagePath?typeof a=="boolean"?(s.debug(`Meta Bind metadataManager 'changed' event (TOGGLE): path=${e.storagePath}, prop=${JSON.stringify(e.storageProp)}, value=${JSON.stringify(a)}`),s.debug("Toggle input detected in metadataManager - using immediate refresh"),setTimeout(()=>{this.refreshActiveView(!1)},50)):(s.debug(`Meta Bind metadataManager 'changed' event: path=${e.storagePath}, prop=${JSON.stringify(e.storageProp)}, value=${JSON.stringify(a)}`),this.handleMetaBindChange(e.storagePath,e.storageProp,a)):s.warn('Meta Bind metadataManager "changed" event received without a valid bindTarget.')})),this.registerEvent(this.metaBindPlugin.metadataManager.on("deleted",e=>{e&&e.storagePath&&(s.debug(`Meta Bind metadataManager 'deleted' event: path=${e.storagePath}, prop=${JSON.stringify(e.storageProp)}`),this.handleMetaBindChange(e.storagePath,e.storageProp,null))}))),this.metaBindPlugin.api&&typeof this.metaBindPlugin.api.onFieldChanged=="function"&&(s.debug("Registering using Meta Bind api.onFieldChanged"),this.registerEvent(this.metaBindPlugin.api.onFieldChanged((e,a,o,n)=>{a&&(s.debug(`Meta Bind onFieldChanged event: fieldType=${e}, file=${a}, key=${o}, value=${JSON.stringify(n)}`),e==="toggle"||typeof n=="boolean"?(s.debug("Toggle field changed - using immediate refresh"),setTimeout(()=>{this.refreshActiveView(!1)},50)):this.handleMetaBindChange(a,o,n))})))})}registerDataviewEvents(){this.app.workspace.onLayoutReady(()=>{if(!this.dataviewApiUtil.isDataviewEnabled()){s.warn("Dataview plugin is not enabled, cannot register for metadata change events");return}this.registerEvent(this.app.metadataCache.on("dataview:metadata-change",(t,e)=>{this.handleMetadataChange(t,e)})),s.debug("Registered for Dataview metadata change events")})}handleMetadataChange(t,e){if(!this.settings.enableDynamicUpdates){s.debug("Dynamic updates are disabled globally, ignoring metadata change");return}s.debug(`Dataview metadata changed: ${t} for file ${e==null?void 0:e.path}`),this.debouncedRefresh()}handleMetaBindChange(t,e,a){if(!this.settings.enableDynamicUpdates){s.debug("Dynamic updates are disabled globally, ignoring Meta Bind change");return}if(s.debug(`Meta Bind property changed: ${e} in file ${t}, value: ${JSON.stringify(a)}`),typeof a=="boolean"){s.debug(`Toggle value detected in handleMetaBindChange: ${a}`),this.forceDataviewCacheRefresh(t),setTimeout(()=>{this.refreshActiveView(!1)},50);return}this.debouncedRefresh()}forceDataviewCacheRefresh(t){if(s.debug(`Forcing Dataview cache refresh for file: ${t}`),!this.dataviewApiUtil.isDataviewEnabled()){s.warn("Dataview plugin is not enabled, cannot force cache refresh");return}try{let e=this.dataviewApiUtil.getDataviewApi();if(!e){s.warn("Dataview API not available, cannot force cache refresh");return}let a=this.app.vault.getAbstractFileByPath(t);if(!a||!("stat"in a)){s.warn(`File not found or not a file: ${t}`);return}try{let o=e.index;o&&typeof o.refreshFile=="function"?(o.refreshFile(a),s.debug(`Successfully forced Dataview cache refresh for file: ${t}`)):(this.app.metadataCache.trigger("dataview:metadata-change","update",a),s.debug(`Triggered dataview:metadata-change event for file: ${t}`))}catch(o){s.warn(`Error accessing Dataview internal API: ${o}`),this.app.metadataCache.trigger("dataview:metadata-change","update",a),s.debug(`Triggered dataview:metadata-change event for file: ${t}`)}}catch(e){s.warn(`Error forcing Dataview cache refresh: ${e}`)}}onunload(){s.debug("DataCards plugin unloaded")}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings),s.setDebugMode(this.settings.debugMode),this.rendererService.updateSettings(this.settings),this.updateDebouncedRefresh(),this.refreshActiveView(!0)}async processDataCardsBlock(t,e,a){s.debug("Processing DataCards block");try{let{query:o,settings:n}=this.parserService.parseDataCardsBlock(t),r=o.toLowerCase().includes("table without id"),l=o;r&&(o.toLowerCase().includes("file")||(l=o.replace(/table without id/i,"TABLE WITHOUT ID file,")));let d=a.sourcePath,g=document.createElement("div");g.style.display="none",document.body.appendChild(g);let c=await this.dataviewApiUtil.executeSafeQuery(l,d,g);if(document.body.removeChild(g),Array.isArray(c.value)&&c.value.length===0){s.debug("Dataview returned empty array"),this.rendererService.renderEmptyState(e,"No notes found");return}if(c.value.values&&Array.isArray(c.value.values)&&c.value.values.length===0){s.debug("Dataview returned empty table"),this.rendererService.renderEmptyState(e,"No notes found");return}let u=c.value;u&&typeof u=="object"&&"successful"in u&&"value"in u&&(s.debug("Unwrapping nested result structure"),u=u.value);let b=new y.MarkdownRenderChild(e);a.addChild(b),this.rendererService.renderCards(e,u,n,b)}catch(o){s.error("Error executing Dataview query:",o),e.createEl("div",{cls:"datacards-error",text:`Error executing Dataview query: ${o.message||String(o)}`})}}refreshActiveView(t=!0){if(this.isRefreshing){s.debug("Refresh already in progress, skipping.");return}this.isRefreshing=!0,s.debug("Starting refreshActiveView...");let e=this.app.workspace.getActiveViewOfType(y.MarkdownView);e&&e.previewMode?(e.previewMode.rerender(!0),t&&new y.Notice("DataCards refreshed",2e3),setTimeout(()=>{this.isRefreshing=!1,s.debug("Refresh finished.")},250)):(t&&new y.Notice("No active markdown view to refresh",2e3),this.isRefreshing=!1,s.debug("No active markdown view found."))}};
